<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telerik.JustMock</name>
    </assembly>
    <members>
        <member name="T:Telerik.JustMock.Abstraction.IFluentConfig`1">
            <summary>
            Interface providing methods for setting up mock instance.
            </summary>
            <typeparam name="T">Target type</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Abstraction.IFluentConfig">
            <summary>
            Interface providing handy methods for setting up mock instance.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Abstraction.IFluentConfig.SetBehavior(Telerik.JustMock.Behavior)">
            <summary>
            Sets the behavior of the mock object.
            </summary>
            <param name="behavior"></param>
            <returns>Reference to <see cref="T:Telerik.JustMock.Abstraction.IFluentConfig`1"/></returns>
        </member>
        <member name="M:Telerik.JustMock.Abstraction.IFluentConfig.MockConstructor">
            <summary>
            Specifies to mock the constructor.
            </summary>
            <returns>Reference to <see cref="T:Telerik.JustMock.Abstraction.IFluentConfig`1"/></returns>
        </member>
        <member name="M:Telerik.JustMock.Abstraction.IFluentConfig.AddAttributeToProxy(System.Reflection.Emit.CustomAttributeBuilder)">
            <summary>
            Add an attribute to the created proxy type.
            </summary>
            <param name="attributeBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Abstraction.IFluentConfig`1.Implements``1">
            <summary>
            Implements interface to the target mock.
            </summary>
            <returns>Reference to <see cref="T:Telerik.JustMock.Abstraction.IFluentConfig`1"/></returns>
        </member>
        <member name="M:Telerik.JustMock.Abstraction.IFluentConfig`1.CallConstructor(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            Invokes the specified constructor. 
            </summary>
            <param name="expression"></param>
            <returns>Reference to <see cref="T:Telerik.JustMock.Abstraction.IFluentConfig`1"/></returns>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation">
            <summary>
              Encapsulates an invocation of a proxied method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.GetArgumentValue(System.Int32)">
            <summary>
              Gets the value of the argument at the specified <paramref name = "index" />.
            </summary>
            <param name = "index">The index.</param>
            <returns>The value of the argument at the specified <paramref name = "index" />.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.GetConcreteMethod">
            <summary>
              Returns the concrete instantiation of the <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Method"/> on the proxy, with any generic
              parameters bound to real types.
            </summary>
            <returns>
              The concrete instantiation of the <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Method"/> on the proxy, or the <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Method"/> if
              not a generic method.
            </returns>
            <remarks>
              Can be slower than calling <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Method"/>.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.GetConcreteMethodInvocationTarget">
            <summary>
              Returns the concrete instantiation of <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.MethodInvocationTarget"/>, with any
              generic parameters bound to real types.
              For interface proxies, this will point to the <see cref="T:System.Reflection.MethodInfo"/> on the target class.
            </summary>
            <returns>The concrete instantiation of <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.MethodInvocationTarget"/>, or
              <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.MethodInvocationTarget"/> if not a generic method.</returns>
            <remarks>
              In debug builds this can be slower than calling <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.MethodInvocationTarget"/>.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed">
            <summary>
              Proceeds the call to the next interceptor in line, and ultimately to the target method.
            </summary>
            <remarks>
              Since interface proxies without a target don't have the target implementation to proceed to,
              it is important, that the last interceptor does not call this method, otherwise a
              <see cref="T:System.NotImplementedException"/> will be thrown.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.SetArgumentValue(System.Int32,System.Object)">
            <summary>
              Overrides the value of an argument at the given <paramref name="index"/> with the
              new <paramref name="value"/> provided.
            </summary>
            <remarks>
              This method accepts an <see cref="T:System.Object"/>, however the value provided must be compatible
              with the type of the argument defined on the method, otherwise an exception will be thrown.
            </remarks>
            <param name="index">The index of the argument to override.</param>
            <param name="value">The new value for the argument.</param>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Arguments">
            <summary>
              Gets the arguments that the <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Method"/> has been invoked with.
            </summary>
            <value>The arguments the method was invoked with.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.GenericArguments">
            <summary>
              Gets the generic arguments of the method.
            </summary>
            <value>The generic arguments, or null if not a generic method.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.InvocationTarget">
            <summary>
              Gets the object on which the invocation is performed. This is different from proxy object
              because most of the time this will be the proxy target object.
            </summary>
            <seealso cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget"/>
            <value>The invocation target.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Method">
            <summary>
              Gets the <see cref="T:System.Reflection.MethodInfo"/> representing the method being invoked on the proxy.
            </summary>
            <value>The <see cref="T:System.Reflection.MethodInfo"/> representing the method being invoked.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.MethodInvocationTarget">
            <summary>
              For interface proxies, this will point to the <see cref="T:System.Reflection.MethodInfo"/> on the target class.
            </summary>
            <value>The method invocation target.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proxy">
            <summary>
              Gets the proxy object on which the intercepted method is invoked.
            </summary>
            <value>Proxy object on which the intercepted method is invoked.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.ReturnValue">
            <summary>
              Gets or sets the return value of the method.
            </summary>
            <value>The return value of the method.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.TargetType">
            <summary>
              Gets the type of the target object for the intercepted method.
            </summary>
            <value>The type of the target object.</value>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyGenerationHook">
            <summary>
              Used during the target type inspection process. Implementors have a chance to customize the
              proxy generation process.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyGenerationHook.MethodsInspected">
            <summary>
              Invoked by the generation process to notify that the whole process has completed.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyGenerationHook.NonProxyableMemberNotification(System.Type,System.Reflection.MemberInfo)">
            <summary>
              Invoked by the generation process to notify that a member was not marked as virtual.
            </summary>
            <param name = "type">The type which declares the non-virtual member.</param>
            <param name = "memberInfo">The non-virtual member.</param>
            <remarks>
              This method gives an opportunity to inspect any non-proxyable member of a type that has 
              been requested to be proxied, and if appropriate - throw an exception to notify the caller.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyGenerationHook.ShouldInterceptMethod(System.Type,System.Reflection.MethodInfo)">
            <summary>
              Invoked by the generation process to determine if the specified method should be proxied.
            </summary>
            <param name = "type">The type which declares the given method.</param>
            <param name = "methodInfo">The method to inspect.</param>
            <returns>True if the given method should be proxied; false otherwise.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IConstructorGenerationHook.GetConstructorImplementation(System.Reflection.ConstructorInfo,Telerik.JustMock.Core.Castle.DynamicProxy.ConstructorImplementationAnalysis)">
            <summary>
            Specifies how to implement the given constructor in the target class.
            </summary>
            <param name="constructorInfo"></param>
            <param name="analysis">Additional information about the constructor.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IConstructorGenerationHook.DefaultConstructorImplementation">
            <summary>
            Specifies how to generate a default constructor for the proxy class when
            the target class doesn't have a default constructor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Contributors.MembersCollector.AcceptMethod(System.Reflection.MethodInfo,System.Boolean,Telerik.JustMock.Core.Castle.DynamicProxy.IProxyGenerationHook)">
            <summary>
              Performs some basic screening and invokes the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyGenerationHook"/>
              to select methods.
            </summary>
            <param name="method"></param>
            <param name="onlyVirtuals"></param>
            <param name="hook"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Contributors.ITypeContributor">
            <summary>
              Interface describing elements composing generated type
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Internal.AttributesUtil">
            <summary>
              Helper class for retrieving attributes.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Internal.AttributesUtil.GetAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
              Gets the attribute.
            </summary>
            <param name = "member">The member.</param>
            <returns>The member attribute.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Internal.AttributesUtil.GetAttributes``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
              Gets the attributes. Does not consider inherited attributes!
            </summary>
            <param name = "member">The member.</param>
            <returns>The member attributes.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Internal.AttributesUtil.GetTypeAttribute``1(System.Type)">
            <summary>
              Gets the type attribute.
            </summary>
            <param name = "type">The type.</param>
            <returns>The type attribute.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Internal.AttributesUtil.GetTypeAttributes``1(System.Type)">
            <summary>
              Gets the type attributes.
            </summary>
            <param name = "type">The type.</param>
            <returns>The type attributes.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Internal.AttributesUtil.GetTypeConverter(System.Reflection.MemberInfo)">
            <summary>
              Gets the type converter.
            </summary>
            <param name = "member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Internal.AttributesUtil.HasAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
              Gets the attribute.
            </summary>
            <param name = "member">The member.</param>
            <returns>The member attribute.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Internal.CollectionExtensions.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
              Checks whether or not collection is null or empty. Assumes colleciton can be safely enumerated multiple times.
            </summary>
            <param name = "this"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Internal.Lock.Create">
            <summary>
            Creates a new lock.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.IServiceEnabledComponent">
            <summary>
            Defines that the implementation wants a 
            <see cref="T:System.IServiceProvider"/> in order to 
            access other components. The creator must be aware
            that the component might (or might not) implement 
            the interface.
            </summary>
            <remarks>
            Used by Castle Project components to, for example, 
            gather logging factories
            </remarks>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.IServiceProviderEx">
            <summary>
            Increments <c>IServiceProvider</c> with a generic service resolution operation.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.IServiceProviderExAccessor">
            <summary>
            This interface should be implemented by classes
            that are available in a bigger context, exposing
            the container to different areas in the same application.
            <para>
            For example, in Web application, the (global) HttpApplication
            subclasses should implement this interface to expose 
            the configured container
            </para>
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.IExtendedLoggerFactory">
            <summary>
              Provides a factory that can produce either <see cref="T:Telerik.JustMock.Core.Castle.Core.Logging.ILogger"/> or
              <see cref="T:Telerik.JustMock.Core.Castle.Core.Logging.IExtendedLogger"/> classes.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.ILoggerFactory">
            <summary>
              Manages the instantiation of <see cref="T:Telerik.JustMock.Core.Castle.Core.Logging.ILogger"/>s.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILoggerFactory.Create(System.Type)">
            <summary>
              Creates a new logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILoggerFactory.Create(System.String)">
            <summary>
              Creates a new logger.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILoggerFactory.Create(System.Type,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILoggerFactory.Create(System.String,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new logger.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.IExtendedLoggerFactory.Create(System.Type)">
            <summary>
              Creates a new extended logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.IExtendedLoggerFactory.Create(System.String)">
            <summary>
              Creates a new extended logger.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.IExtendedLoggerFactory.Create(System.Type,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new extended logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.IExtendedLoggerFactory.Create(System.String,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new extended logger.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.AbstractExtendedLoggerFactory.Create(System.Type)">
            <summary>
              Creates a new extended logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.AbstractExtendedLoggerFactory.Create(System.String)">
            <summary>
              Creates a new extended logger.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.AbstractExtendedLoggerFactory.Create(System.Type,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new extended logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.AbstractExtendedLoggerFactory.Create(System.String,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new extended logger.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.AbstractExtendedLoggerFactory.Telerik#JustMock#Core#Castle#Core#Logging#ILoggerFactory#Create(System.Type)">
            <summary>
              Creates a new logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.AbstractExtendedLoggerFactory.Telerik#JustMock#Core#Castle#Core#Logging#ILoggerFactory#Create(System.String)">
            <summary>
              Creates a new logger.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.AbstractExtendedLoggerFactory.Telerik#JustMock#Core#Castle#Core#Logging#ILoggerFactory#Create(System.Type,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.AbstractExtendedLoggerFactory.Telerik#JustMock#Core#Castle#Core#Logging#ILoggerFactory#Create(System.String,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new logger.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.AbstractExtendedLoggerFactory.GetConfigFile(System.String)">
            <summary>
              Gets the configuration file.
            </summary>
            <param name = "fileName">i.e. log4net.config</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.AbstractLoggerFactory.GetConfigFile(System.String)">
            <summary>
              Gets the configuration file.
            </summary>
            <param name = "fileName">i.e. log4net.config</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.ConsoleLogger">
            <summary>
            The Logger sending everything to the standard output streams.
            This is mainly for the cases when you have a utility that
            does not have a logger to supply.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger">
            <summary>
            The Level Filtered Logger class.  This is a base clase which
            provides a LogLevel attribute and reroutes all functions into
            one Log method.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.ILogger">
            <summary>
              Manages logging.
            </summary>
            <remarks>
              This is a facade for the different logging subsystems.
              It offers a simplified interface that follows IOC patterns
              and a simplified priority/level/severity abstraction.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.CreateChildLogger(System.String)">
            <summary>
              Create a new child logger.
              The name of the child logger is [current-loggers-name].[passed-in-name]
            </summary>
            <param name="loggerName">The Subname of this logger.</param>
            <returns>The New ILogger instance.</returns>
            <exception cref="T:System.ArgumentException">If the name has an empty element name.</exception>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Debug(System.String)">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Debug(System.Func{System.String})">
            <summary>
              Logs a debug message with lazily constructed message. The message will be constructed only if the <see cref="P:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.IsDebugEnabled"/> is true.
            </summary>
            <param name="messageFactory"></param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Debug(System.String,System.Exception)">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.DebugFormat(System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.DebugFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.DebugFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Error(System.String)">
            <summary>
              Logs an error message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Error(System.Func{System.String})">
            <summary>
              Logs an error message with lazily constructed message. The message will be constructed only if the <see cref="P:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.IsErrorEnabled"/> is true.
            </summary>
            <param name="messageFactory"></param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Error(System.String,System.Exception)">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.ErrorFormat(System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.ErrorFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.ErrorFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Fatal(System.String)">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Fatal(System.Func{System.String})">
            <summary>
              Logs a fatal message with lazily constructed message. The message will be constructed only if the <see cref="P:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.IsFatalEnabled"/> is true.
            </summary>
            <param name="messageFactory"></param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Fatal(System.String,System.Exception)">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.FatalFormat(System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.FatalFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.FatalFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Info(System.String)">
            <summary>
              Logs an info message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Info(System.Func{System.String})">
            <summary>
              Logs a info message with lazily constructed message. The message will be constructed only if the <see cref="P:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.IsInfoEnabled"/> is true.
            </summary>
            <param name="messageFactory"></param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Info(System.String,System.Exception)">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.InfoFormat(System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.InfoFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.InfoFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Warn(System.String)">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Warn(System.Func{System.String})">
            <summary>
              Logs a warn message with lazily constructed message. The message will be constructed only if the <see cref="P:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.IsWarnEnabled"/> is true.
            </summary>
            <param name="messageFactory"></param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Warn(System.String,System.Exception)">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.WarnFormat(System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.WarnFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.WarnFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.IsDebugEnabled">
            <summary>
              Determines if messages of priority "debug" will be logged.
            </summary>
            <value>True if "debug" messages will be logged.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.IsErrorEnabled">
            <summary>
              Determines if messages of priority "error" will be logged.
            </summary>
            <value>True if "error" messages will be logged.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.IsFatalEnabled">
            <summary>
              Determines if messages of priority "fatal" will be logged.
            </summary>
            <value>True if "fatal" messages will be logged.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.IsInfoEnabled">
            <summary>
              Determines if messages of priority "info" will be logged.
            </summary>
            <value>True if "info" messages will be logged.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.IsWarnEnabled">
            <summary>
              Determines if messages of priority "warn" will be logged.
            </summary>
            <value>True if "warn" messages will be logged.</value>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.#ctor">
            <summary>
              Creates a new <c>LevelFilteredLogger</c>.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.InitializeLifetimeService">
            <summary>
            Keep the instance alive in a remoting scenario
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Debug(System.String)">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Debug(System.String,System.Exception)">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.DebugFormat(System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.DebugFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.DebugFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Info(System.String)">
            <summary>
              Logs an info message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Info(System.String,System.Exception)">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.InfoFormat(System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.InfoFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.InfoFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Warn(System.String)">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Warn(System.String,System.Exception)">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.WarnFormat(System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.WarnFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.WarnFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Error(System.String)">
            <summary>
              Logs an error message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Error(System.String,System.Exception)">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.ErrorFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.ErrorFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Fatal(System.String)">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Fatal(System.String,System.Exception)">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.FatalFormat(System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.FatalFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.FatalFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Log(Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel,System.String,System.String,System.Exception)">
            <summary>
              Implementors output the log content by implementing this method only.
              Note that exception can be null
            </summary>
            <param name = "loggerLevel"></param>
            <param name = "loggerName"></param>
            <param name = "message"></param>
            <param name = "exception"></param>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Level">
            <value>
              The <c>LoggerLevel</c> that this logger
              will be using. Defaults to <c>LoggerLevel.Off</c>
            </value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Name">
            <value>
              The name that this logger will be using. 
              Defaults to <c>String.Empty</c>
            </value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.IsDebugEnabled">
            <summary>
              Determines if messages of priority "debug" will be logged.
            </summary>
            <value><c>true</c> if log level flags include the <see cref="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Debug"/> bit</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.IsInfoEnabled">
            <summary>
              Determines if messages of priority "info" will be logged.
            </summary>
            <value><c>true</c> if log level flags include the <see cref="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Info"/> bit</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.IsWarnEnabled">
            <summary>
              Determines if messages of priority "warn" will be logged.
            </summary>
            <value><c>true</c> if log level flags include the <see cref="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Warn"/> bit</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.IsErrorEnabled">
            <summary>
              Determines if messages of priority "error" will be logged.
            </summary>
            <value><c>true</c> if log level flags include the <see cref="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Error"/> bit</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.IsFatalEnabled">
            <summary>
              Determines if messages of priority "fatal" will be logged.
            </summary>
            <value><c>true</c> if log level flags include the <see cref="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Fatal"/> bit</value>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ConsoleLogger.#ctor">
            <summary>
              Creates a new ConsoleLogger with the <c>Level</c>
              set to <c>LoggerLevel.Debug</c> and the <c>Name</c>
              set to <c>String.Empty</c>.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ConsoleLogger.#ctor(Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new ConsoleLogger with the <c>Name</c>
              set to <c>String.Empty</c>.
            </summary>
            <param name = "logLevel">The logs Level.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ConsoleLogger.#ctor(System.String)">
            <summary>
              Creates a new ConsoleLogger with the <c>Level</c>
              set to <c>LoggerLevel.Debug</c>.
            </summary>
            <param name = "name">The logs Name.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ConsoleLogger.#ctor(System.String,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new ConsoleLogger.
            </summary>
            <param name = "name">The logs Name.</param>
            <param name = "logLevel">The logs Level.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ConsoleLogger.Log(Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel,System.String,System.String,System.Exception)">
            <summary>
              A Common method to log.
            </summary>
            <param name = "loggerLevel">The level of logging</param>
            <param name = "loggerName">The name of the logger</param>
            <param name = "message">The Message</param>
            <param name = "exception">The Exception</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ConsoleLogger.CreateChildLogger(System.String)">
            <summary>
              Returns a new <c>ConsoleLogger</c> with the name
              added after this loggers name, with a dot in between.
            </summary>
            <param name = "loggerName">The added hierarchical name.</param>
            <returns>A new <c>ConsoleLogger</c>.</returns>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.DiagnosticsLogger">
            <summary>
              The Logger using standart Diagnostics namespace.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.DiagnosticsLogger.#ctor(System.String)">
            <summary>
              Creates a logger based on <see cref="T:System.Diagnostics.EventLog"/>.
            </summary>
            <param name="logName"><see cref="P:System.Diagnostics.EventLog.Log"/></param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.DiagnosticsLogger.#ctor(System.String,System.String)">
            <summary>
              Creates a logger based on <see cref="T:System.Diagnostics.EventLog"/>.
            </summary>
            <param name="logName"><see cref="P:System.Diagnostics.EventLog.Log"/></param>
            <param name="source"><see cref="P:System.Diagnostics.EventLog.Source"/></param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.DiagnosticsLogger.#ctor(System.String,System.String,System.String)">
            <summary>
              Creates a logger based on <see cref="T:System.Diagnostics.EventLog"/>.
            </summary>
            <param name="logName"><see cref="P:System.Diagnostics.EventLog.Log"/></param>
            <param name="machineName"><see cref="P:System.Diagnostics.EventLog.MachineName"/></param>
            <param name="source"><see cref="P:System.Diagnostics.EventLog.Source"/></param>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.IContextProperties">
            <summary>
              Interface for Context Properties implementations
            </summary>
            <remarks>
              <para>
                This interface defines a basic property get set accessor.
              </para>
              <para>
                Based on the ContextPropertiesBase of log4net, by Nicko Cadell.
              </para>
            </remarks>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.IContextProperties.Item(System.String)">
            <summary>
              Gets or sets the value of a property
            </summary>
            <value>
              The value for the property with the specified key
            </value>
            <remarks>
              <para>
                Gets or sets the value of a property
              </para>
            </remarks>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.IExtendedLogger">
            <summary>
              Provides an interface that supports <see cref="T:Telerik.JustMock.Core.Castle.Core.Logging.ILogger"/> and
              allows the storage and retrieval of Contexts. These are supported in
              both log4net and NLog.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.IExtendedLogger.GlobalProperties">
            <summary>
              Exposes the Global Context of the extended logger.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.IExtendedLogger.ThreadProperties">
            <summary>
              Exposes the Thread Context of the extended logger.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.IExtendedLogger.ThreadStacks">
            <summary>
              Exposes the Thread Stack of the extended logger.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel">
            <summary>
              Supporting Logger levels.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Off">
            <summary>
              Logging will be off
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Fatal">
            <summary>
              Fatal logging level
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Error">
            <summary>
              Error logging level
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Warn">
            <summary>
              Warn logging level
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Info">
            <summary>
              Info logging level
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Debug">
            <summary>
              Debug logging level
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.NullLogFactory">
            <summary>
            NullLogFactory used when logging is turned off.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogFactory.Create(System.String)">
            <summary>
              Creates an instance of ILogger with the specified name.
            </summary>
            <param name = "name">Name.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogFactory.Create(System.String,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates an instance of ILogger with the specified name and LoggerLevel.
            </summary>
            <param name = "name">Name.</param>
            <param name = "level">Level.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger">
            <summary>
              The Null Logger class.  This is useful for implementations where you need
              to provide a logger to a utility class, but do not want any output from it.
              It also helps when you have a utility that does not have a logger to supply.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.CreateChildLogger(System.String)">
            <summary>
              Returns this <c>NullLogger</c>.
            </summary>
            <param name = "loggerName">Ignored</param>
            <returns>This ILogger instance.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.Debug(System.String)">
            <summary>
              No-op.
            </summary>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.Debug(System.String,System.Exception)">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.DebugFormat(System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.DebugFormat(System.Exception,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.DebugFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.Error(System.String)">
            <summary>
              No-op.
            </summary>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.Error(System.String,System.Exception)">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.ErrorFormat(System.Exception,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.ErrorFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.Fatal(System.String)">
            <summary>
              No-op.
            </summary>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.Fatal(System.String,System.Exception)">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.FatalFormat(System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.FatalFormat(System.Exception,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.FatalFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.Info(System.String)">
            <summary>
              No-op.
            </summary>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.Info(System.String,System.Exception)">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.InfoFormat(System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.InfoFormat(System.Exception,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.InfoFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.Warn(System.String)">
            <summary>
              No-op.
            </summary>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.Warn(System.String,System.Exception)">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.WarnFormat(System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.WarnFormat(System.Exception,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.WarnFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.GlobalProperties">
            <summary>
              Returns empty context properties.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.ThreadProperties">
            <summary>
              Returns empty context properties.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.ThreadStacks">
            <summary>
              Returns empty context stacks.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.IsDebugEnabled">
            <summary>
              No-op.
            </summary>
            <value>false</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.IsErrorEnabled">
            <summary>
              No-op.
            </summary>
            <value>false</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.IsFatalEnabled">
            <summary>
              No-op.
            </summary>
            <value>false</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.IsInfoEnabled">
            <summary>
              No-op.
            </summary>
            <value>false</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.IsWarnEnabled">
            <summary>
              No-op.
            </summary>
            <value>false</value>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.StreamLogger">
            <summary>
            The Stream Logger class.  This class can stream log information
            to any stream, it is suitable for storing a log file to disk,
            or to a <c>MemoryStream</c> for testing your components.
            </summary>
            <remarks>
            This logger is not thread safe.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.StreamLogger.#ctor(System.String,System.IO.Stream)">
            <summary>
              Creates a new <c>StreamLogger</c> with default encoding 
              and buffer size. Initial Level is set to Debug.
            </summary>
            <param name = "name">
              The name of the log.
            </param>
            <param name = "stream">
              The stream that will be used for logging,
              seeking while the logger is alive 
            </param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.StreamLogger.#ctor(System.String,System.IO.Stream,System.Text.Encoding)">
            <summary>
              Creates a new <c>StreamLogger</c> with default buffer size.
              Initial Level is set to Debug.
            </summary>
            <param name="name">
              The name of the log.
            </param>
            <param name="stream">
              The stream that will be used for logging,
              seeking while the logger is alive 
            </param>
            <param name="encoding">
              The encoding that will be used for this stream.
              <see cref="T:System.IO.StreamWriter"/>
            </param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.StreamLogger.#ctor(System.String,System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
              Creates a new <c>StreamLogger</c>. 
              Initial Level is set to Debug.
            </summary>
            <param name="name">
              The name of the log.
            </param>
            <param name="stream">
              The stream that will be used for logging,
              seeking while the logger is alive 
            </param>
            <param name="encoding">
              The encoding that will be used for this stream.
              <see cref="T:System.IO.StreamWriter"/>
            </param>
            <param name="bufferSize">
              The buffer size that will be used for this stream.
              <see cref="T:System.IO.StreamWriter"/>
            </param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.StreamLogger.#ctor(System.String,System.IO.StreamWriter)">
            <summary>
              Creates a new <c>StreamLogger</c> with 
              Debug as default Level.
            </summary>
            <param name = "name">The name of the log.</param>
            <param name = "writer">The <c>StreamWriter</c> the log will write to.</param>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.StreamLoggerFactory">
            <summary>
              Creates <see cref="T:Telerik.JustMock.Core.Castle.Core.Logging.StreamLogger"/> outputing 
              to files. The name of the file is derived from the log name
              plus the 'log' extension.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.TraceLogger">
            <summary>
              The TraceLogger sends all logging to the System.Diagnostics.TraceSource
              built into the .net framework.
            </summary>
            <remarks>
              Logging can be configured in the system.diagnostics configuration 
              section. 
            
              If logger doesn't find a source name with a full match it will
              use source names which match the namespace partially. For example you can
              configure from all castle components by adding a source name with the
              name "Castle". 
            
              If no portion of the namespace matches the source named "Default" will
              be used.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.TraceLogger.#ctor(System.String)">
            <summary>
            Build a new trace logger based on the named TraceSource
            </summary>
            <param name="name">The name used to locate the best TraceSource. In most cases comes from the using type's fullname.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.TraceLogger.#ctor(System.String,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
            Build a new trace logger based on the named TraceSource
            </summary>
            <param name="name">The name used to locate the best TraceSource. In most cases comes from the using type's fullname.</param>
            <param name="level">The default logging level at which this source should write messages. In almost all cases this
            default value will be overridden in the config file. </param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.TraceLogger.CreateChildLogger(System.String)">
            <summary>
            Create a new child logger.
            The name of the child logger is [current-loggers-name].[passed-in-name]
            </summary>
            <param name="loggerName">The Subname of this logger.</param>
            <returns>The New ILogger instance.</returns> 
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.TraceLoggerFactory">
            <summary>
              Used to create the TraceLogger implementation of ILogger interface. See <see cref="T:Telerik.JustMock.Core.Castle.Core.Logging.TraceLogger"/>.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Pair`2">
            <summary>
            General purpose class to represent a standard pair of values. 
            </summary>
            <typeparam name="TFirst">Type of the first value</typeparam>
            <typeparam name="TSecond">Type of the second value</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Pair`2.#ctor(`0,`1)">
            <summary>
            Constructs a pair with its values
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter">
            <summary>
            Readonly implementation of <see cref="T:System.Collections.IDictionary"/> which uses an anonymous object as its source. Uses names of properties as keys, and property values as... well - values. Keys are not case sensitive.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.#ctor(System.Object)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.Add(System.Object,System.Object)">
            <summary>
              Adds an element with the provided key and value to the <see cref = "T:System.Collections.IDictionary" /> object.
            </summary>
            <param name = "key">The <see cref = "T:System.Object" /> to use as the key of the element to add.</param>
            <param name = "value">The <see cref = "T:System.Object" /> to use as the value of the element to add.</param>
            <exception cref = "T:System.ArgumentNullException">
              <paramref name = "key" /> is null. </exception>
            <exception cref = "T:System.ArgumentException">An element with the same key already exists in the <see
               cref = "T:System.Collections.IDictionary" /> object. </exception>
            <exception cref = "T:System.NotSupportedException">The <see cref = "T:System.Collections.IDictionary" /> is read-only.-or- The <see
               cref = "T:System.Collections.IDictionary" /> has a fixed size. </exception>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.Clear">
            <summary>
              Removes all elements from the <see cref = "T:System.Collections.IDictionary" /> object.
            </summary>
            <exception cref = "T:System.NotSupportedException">The <see cref = "T:System.Collections.IDictionary" /> object is read-only. </exception>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.Contains(System.Object)">
            <summary>
              Determines whether the <see cref = "T:System.Collections.IDictionary" /> object contains an element with the specified key.
            </summary>
            <param name = "key">The key to locate in the <see cref = "T:System.Collections.IDictionary" /> object.</param>
            <returns>
              true if the <see cref = "T:System.Collections.IDictionary" /> contains an element with the key; otherwise, false.
            </returns>
            <exception cref = "T:System.ArgumentNullException">
              <paramref name = "key" /> is null. </exception>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.Remove(System.Object)">
            <summary>
              Removes the element with the specified key from the <see cref = "T:System.Collections.IDictionary" /> object.
            </summary>
            <param name = "key">The key of the element to remove.</param>
            <exception cref = "T:System.ArgumentNullException">
              <paramref name = "key" /> is null. </exception>
            <exception cref = "T:System.NotSupportedException">The <see cref = "T:System.Collections.IDictionary" /> object is read-only.-or- The <see
               cref = "T:System.Collections.IDictionary" /> has a fixed size. </exception>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
              An <see cref = "T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
              Copies the elements of the <see cref = "T:System.Collections.ICollection" /> to an <see cref = "T:System.Array" />, starting at a particular <see
               cref = "T:System.Array" /> index.
            </summary>
            <param name = "array">The one-dimensional <see cref = "T:System.Array" /> that is the destination of the elements copied from <see
               cref = "T:System.Collections.ICollection" />. The <see cref = "T:System.Array" /> must have zero-based indexing.</param>
            <param name = "index">The zero-based index in <paramref name = "array" /> at which copying begins.</param>
            <exception cref = "T:System.ArgumentNullException">
              <paramref name = "array" /> is null. </exception>
            <exception cref = "T:System.ArgumentOutOfRangeException">
              <paramref name = "index" /> is less than zero. </exception>
            <exception cref = "T:System.ArgumentException">
              <paramref name = "array" /> is multidimensional.-or- <paramref name = "index" /> is equal to or greater than the length of <paramref
               name = "array" />.-or- The number of elements in the source <see cref = "T:System.Collections.ICollection" /> is greater than the available space from <paramref
               name = "index" /> to the end of the destination <paramref name = "array" />. </exception>
            <exception cref = "T:System.ArgumentException">The type of the source <see cref = "T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref
               name = "array" />. </exception>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.System#Collections#IDictionary#GetEnumerator">
            <summary>
              Returns an <see cref = "T:System.Collections.IDictionaryEnumerator" /> object for the <see
               cref = "T:System.Collections.IDictionary" /> object.
            </summary>
            <returns>
              An <see cref = "T:System.Collections.IDictionaryEnumerator" /> object for the <see
               cref = "T:System.Collections.IDictionary" /> object.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.Read(System.Collections.IDictionary,System.Object)">
            <summary>
              Reads values of properties from <paramref name = "valuesAsAnonymousObject" /> and inserts them into <paramref
               name = "targetDictionary" /> using property names as keys.
            </summary>
            <param name = "targetDictionary"></param>
            <param name = "valuesAsAnonymousObject"></param>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.Count">
            <summary>
              Gets the number of elements contained in the <see cref = "T:System.Collections.ICollection" />.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref = "T:System.Collections.ICollection" />.</returns>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.IsSynchronized">
            <summary>
              Gets a value indicating whether access to the <see cref = "T:System.Collections.ICollection" /> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref = "T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.SyncRoot">
            <summary>
              Gets an object that can be used to synchronize access to the <see cref = "T:System.Collections.ICollection" />.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref = "T:System.Collections.ICollection" />.</returns>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.IsReadOnly">
            <summary>
              Gets a value indicating whether the <see cref = "T:System.Collections.IDictionary" /> object is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Collections.IDictionary" /> object is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.Item(System.Object)">
            <summary>
              Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.Keys">
            <summary>
              Gets an <see cref = "T:System.Collections.ICollection" /> object containing the keys of the <see
               cref = "T:System.Collections.IDictionary" /> object.
            </summary>
            <value></value>
            <returns>An <see cref = "T:System.Collections.ICollection" /> object containing the keys of the <see
               cref = "T:System.Collections.IDictionary" /> object.</returns>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.Values">
            <summary>
              Gets an <see cref = "T:System.Collections.ICollection" /> object containing the values in the <see
               cref = "T:System.Collections.IDictionary" /> object.
            </summary>
            <value></value>
            <returns>An <see cref = "T:System.Collections.ICollection" /> object containing the values in the <see
               cref = "T:System.Collections.IDictionary" /> object.</returns>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.System#Collections#IDictionary#IsFixedSize">
            <summary>
              Gets a value indicating whether the <see cref = "T:System.Collections.IDictionary" /> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Collections.IDictionary" /> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.DefaultProxyBuilder">
            <summary>
              Default implementation of <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> interface producing in-memory proxy assemblies.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder">
            <summary>
              Abstracts the implementation of proxy type construction.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder.CreateClassProxyType(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates a proxy type for given <paramref name="classToProxy"/>, implementing <paramref name="additionalInterfacesToProxy"/>, using <paramref name="options"/> provided.
            </summary>
            <param name="classToProxy">The class type to proxy.</param>
            <param name="additionalInterfacesToProxy">Additional interface types to proxy.</param>
            <param name="options">The proxy generation options.</param>
            <returns>The generated proxy type.</returns>
            <remarks>
              Implementers should return a proxy type for the specified class and interfaces.
              Additional interfaces should be only 'mark' interfaces, that is, they should work like interface proxy without target. (See <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)"/> method.)
            </remarks>
            <exception cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is not public.
              Note that to avoid this exception, you can mark offending type internal, and define <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute"/> 
              pointing to Castle Dynamic Proxy assembly, in assembly containing that type, if this is appropriate.</exception>
            <seealso cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.ClassProxyGenerator"/>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder.CreateInterfaceProxyTypeWithTarget(System.Type,System.Type[],System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates a proxy type that proxies calls to <paramref name="interfaceToProxy"/> members on <paramref name="targetType"/>, implementing <paramref name="additionalInterfacesToProxy"/>, using <paramref name="options"/> provided.
            </summary>
            <param name="interfaceToProxy">The interface type to proxy.</param>
            <param name="additionalInterfacesToProxy">Additional interface types to proxy.</param>
            <param name="targetType">Type implementing <paramref name="interfaceToProxy"/> on which calls to the interface members should be intercepted.</param>
            <param name="options">The proxy generation options.</param>
            <returns>The generated proxy type.</returns>
            <remarks>
              Implementers should return a proxy type for the specified interface that 'proceeds' executions to the specified target.
              Additional interfaces should be only 'mark' interfaces, that is, they should work like interface proxy without target. (See <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)"/> method.)
            </remarks>
            <exception cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is not public.
              Note that to avoid this exception, you can mark offending type internal, and define <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute"/> 
              pointing to Castle Dynamic Proxy assembly, in assembly containing that type, if this is appropriate.</exception>
            <seealso cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator"/>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder.CreateInterfaceProxyTypeWithTargetInterface(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates a proxy type for given <paramref name="interfaceToProxy"/> and <parmaref name="additionalInterfacesToProxy"/> that delegates all calls to the provided interceptors and allows interceptors to switch the actual target of invocation.
            </summary>
            <param name="interfaceToProxy">The interface type to proxy.</param>
            <param name="additionalInterfacesToProxy">Additional interface types to proxy.</param>
            <param name="options">The proxy generation options.</param>
            <returns>The generated proxy type.</returns>
            <remarks>
              Implementers should return a proxy type for the specified interface(s) that delegate all executions to the specified interceptors
              and uses an instance of the interface as their targets (i.e. <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.InvocationTarget"/>), rather than a class. All <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation"/> classes should then implement <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget"/> interface,
              to allow interceptors to switch invocation target with instance of another type implementing called interface.
            </remarks>
            <exception cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is not public.
              Note that to avoid this exception, you can mark offending type internal, and define <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute"/> 
              pointing to Castle Dynamic Proxy assembly, in assembly containing that type, if this is appropriate.</exception>
            <seealso cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.InterfaceProxyWithTargetInterfaceGenerator"/>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates a proxy type for given <paramref name="interfaceToProxy"/> that delegates all calls to the provided interceptors.
            </summary>
            <param name="interfaceToProxy">The interface type to proxy.</param>
            <param name="additionalInterfacesToProxy">Additional interface types to proxy.</param>
            <param name="options">The proxy generation options.</param>
            <returns>The generated proxy type.</returns>
            <remarks>
              Implementers should return a proxy type for the specified interface and additional interfaces that delegate all executions to the specified interceptors.
            </remarks>
            <exception cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is not public.
              Note that to avoid this exception, you can mark offending type internal, and define <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute"/> 
              pointing to Castle Dynamic Proxy assembly, in assembly containing that type, if this is appropriate.</exception>
            <seealso cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.InterfaceProxyWithoutTargetGenerator"/>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder.Logger">
            <summary>
              Gets or sets the <see cref="T:Telerik.JustMock.Core.Castle.Core.Logging.ILogger"/> that this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator"/> logs to.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder.ModuleScope">
            <summary>
              Gets the <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder.ModuleScope"/> associated with this builder.
            </summary>
            <value>The module scope associated with this builder.</value>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.DefaultProxyBuilder.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.DefaultProxyBuilder"/> class with new <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.DefaultProxyBuilder.ModuleScope"/>.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.DefaultProxyBuilder.#ctor(Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.DefaultProxyBuilder"/> class.
            </summary>
            <param name="scope">The module scope for generated proxy types.</param>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.IAttributeDisassembler">
            <summary>
              Provides functionality for disassembling instances of attributes to CustomAttributeBuilder form, during the process of emiting new types by Dynamic Proxy.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IAttributeDisassembler.Disassemble(System.Attribute)">
            <summary>
              Disassembles given attribute instance back to corresponding CustomAttributeBuilder.
            </summary>
            <param name="attribute">An instance of attribute to disassemble</param>
            <returns><see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> corresponding 1 to 1 to given attribute instance, or null reference.</returns>
            <remarks>
              Implementers should return <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> that corresponds to given attribute instance 1 to 1,
              that is after calling specified constructor with specified arguments, and setting specified properties and fields with values specified
              we should be able to get an attribute instance identical to the one passed in <paramref name="attribute"/>. Implementer can return null
              if it wishes to opt out of replicating the attribute. Notice however, that for some cases, like attributes passed explicitly by the user
              it is illegal to return null, and doing so will result in exception.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.AttributeDisassembler.HandleError(System.Type,System.Exception)">
            <summary>
              Handles error during disassembly process
            </summary>
            <param name = "attributeType">Type of the attribute being disassembled</param>
            <param name = "exception">Exception thrown during the process</param>
            <returns>usually null, or (re)throws the exception</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.AttributeDisassembler.InitializeConstructorArgs(System.Type,System.Attribute,System.Reflection.ParameterInfo[])">
            <summary>
              Here we try to match a constructor argument to its value.
              Since we can't get the values from the assembly, we use some heuristics to get it.
              a/ we first try to match all the properties on the attributes by name (case insensitive) to the argument
              b/ if we fail we try to match them by property type, with some smarts about convertions (i,e: can use Guid for string).
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.AttributeDisassembler.ReplaceIfBetterMatch(System.Reflection.ParameterInfo,System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <summary>
              We have the following rules here.
              Try to find a matching type, failing that, if the parameter is string, get the first property (under the assumption that
              we can convert it.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.AttributeDisassembler.ConvertValue(System.Object,System.Type)">
            <summary>
              Attributes can only accept simple types, so we return null for null,
              if the value is passed as string we call to string (should help with converting), 
              otherwise, we use the value as is (enums, integer, etc).
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AttributesToAvoidReplicating">
            <summary>
            A list of attributes that must not be replicated when building a proxy. JustMock
            tries to copy all attributes from the types and methods being proxied, but that is
            not always a good idea for every type of attribute. Add additional attributes
            to this list that prevent the proxy from working correctly.
            </summary>
            <example>
            <see cref="T:Telerik.JustMock.AttributesToAvoidReplicating"/>.Add(typeof(ServiceContractAttribute));
            </example>
        </member>
        <member name="M:Telerik.JustMock.AttributesToAvoidReplicating.Add(System.Type)">
            <summary>
            Add an attribute type that must not be replicated when building a proxy.
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:Telerik.JustMock.AttributesToAvoidReplicating.Add``1">
            <summary>
            Add an attribute type that must not be replicated when building a proxy.
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.BaseProxyGenerator">
            <summary>
              Base class that exposes the common functionalities
              to proxy generation.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.BaseProxyGenerator.AddMappingNoCheck(System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.Contributors.ITypeContributor,System.Collections.Generic.IDictionary{System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.Contributors.ITypeContributor})">
            <summary>
              It is safe to add mapping (no mapping for the interface exists)
            </summary>
            <param name = "implementer"></param>
            <param name = "interface"></param>
            <param name = "mapping"></param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.BaseProxyGenerator.GenerateParameterlessConstructor(Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.ClassEmitter,System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.SimpleAST.FieldReference)">
            <summary>
              Generates a parameters constructor that initializes the proxy
              state with <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.StandardInterceptor"/> just to make it non-null.
              <para>
                This constructor is important to allow proxies to be XML serializable
              </para>
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.CacheKey.#ctor(System.Reflection.MemberInfo,System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.CacheKey"/> class.
            </summary>
            <param name="target">Target element. This is either target type or target method for invocation types.</param>
            <param name="type">The type of the proxy. This is base type for invocation types.</param>
            <param name="interfaces">The interfaces.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.CacheKey.#ctor(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.CacheKey"/> class.
            </summary>
            <param name="target">Type of the target.</param>
            <param name="interfaces">The interfaces.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.InvocationTypeGenerator.GetBaseCtorArguments(System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,System.Reflection.ConstructorInfo@)">
            <summary>
              Generates the constructor for the class that extends
              <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.AbstractInvocation"/>
            </summary>
            <param name="targetFieldType"></param>
            <param name="proxyGenerationOptions"></param>
            <param name="baseConstructor"></param>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.LdcOpCodesDictionary">
            <summary>
              s
              Provides appropriate Ldc.X opcode for the type of primitive value to be loaded.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.LdindOpCodesDictionary">
            <summary>
              Provides appropriate Ldind.X opcode for 
              the type of primitive value to be loaded indirectly.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.OpCodeUtil.EmitLoadIndirectOpCodeForType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
              Emits a load indirect opcode of the appropriate type for a value or object reference.
              Pops a pointer off the evaluation stack, dereferences it and loads
              a value of the specified type.
            </summary>
            <param name = "gen"></param>
            <param name = "type"></param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.OpCodeUtil.EmitLoadOpCodeForConstantValue(System.Reflection.Emit.ILGenerator,System.Object)">
            <summary>
              Emits a load opcode of the appropriate kind for a constant string or
              primitive value.
            </summary>
            <param name = "gen"></param>
            <param name = "value"></param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.OpCodeUtil.EmitLoadOpCodeForDefaultValueOfType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
              Emits a load opcode of the appropriate kind for the constant default value of a
              type, such as 0 for value types and null for reference types.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.OpCodeUtil.EmitStoreIndirectOpCodeForType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
              Emits a store indirectopcode of the appropriate type for a value or object reference.
              Pops a value of the specified type and a pointer off the evaluation stack, and
              stores the value.
            </summary>
            <param name = "gen"></param>
            <param name = "type"></param>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.PropertiesCollection">
            <summary>
              Summary description for PropertiesCollection.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.SimpleAST.IndirectReference">
            <summary>
              Wraps a reference that is passed 
              ByRef and provides indirect load/store support.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.SimpleAST.NewArrayExpression">
            <summary>
              Summary description for NewArrayExpression.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.SimpleAST.ReferencesToObjectArrayExpression">
            <summary>
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.StindOpCodesDictionary">
            <summary>
              Provides appropriate Stind.X opcode 
              for the type of primitive value to be stored indirectly.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.INamingScope">
            <summary>
              Represents the scope of uniquenes of names for types and their members
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.INamingScope.GetUniqueName(System.String)">
            <summary>
              Gets a unique name based on <paramref name="suggestedName"/>
            </summary>
            <param name="suggestedName">Name suggested by the caller</param>
            <returns>Unique name based on <paramref name="suggestedName"/>.</returns>
            <remarks>
              Implementers should provide name as closely resembling <paramref name="suggestedName"/> as possible.
              Generally if no collision occurs it is suggested to return suggested name, otherwise append sequential suffix.
              Implementers must return deterministic names, that is when <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.INamingScope.GetUniqueName(System.String)"/> is called twice 
              with the same suggested name, the same returned name should be provided each time. Non-deterministic return
              values, like appending random suffices will break serialization of proxies.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.INamingScope.SafeSubScope">
            <summary>
              Returns new, disposable naming scope. It is responsibilty of the caller to make sure that no naming collision
              with enclosing scope, or other subscopes is possible.
            </summary>
            <returns>New naming scope.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.MetaEvent.#ctor(System.String,System.Type,System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.Generators.MetaMethod,Telerik.JustMock.Core.Castle.DynamicProxy.Generators.MetaMethod,System.Reflection.EventAttributes,Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.MetaEvent"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="declaringType">Type declaring the original event being overriten, or null.</param>
            <param name="eventDelegateType"></param>
            <param name="adder">The add method.</param>
            <param name="remover">The remove method.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.MethodFinder">
            <summary>
              Returns the methods implemented by a type. Use this instead of Type.GetMethods() to work around a CLR issue
              where duplicate MethodInfos are returned by Type.GetMethods() after a token of a generic type's method was loaded.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget">
            <summary>
              Exposes means to change target objects of proxies and invocations
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget.ChangeInvocationTarget(System.Object)">
            <summary>
              Changes the target object (<see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.InvocationTarget"/>) of current <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation"/>.
            </summary>
            <param name="target">The new value of target of invocation.</param>
            <remarks>
              Although the method takes <see cref="T:System.Object"/> the actual instance must be of type assignable to <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.TargetType"/>, otherwise an <see cref="T:System.InvalidCastException"/> will be thrown.
              Also while it's technically legal to pass null reference (Nothing in Visual Basic) as <paramref name="target"/>, for obvious reasons Dynamic Proxy will not be able to call the intercepted method on such target.
              In this case last interceptor in the pipeline mustn't call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/> or a <see cref="T:System.NotImplementedException"/> will be throws.
              Also while it's technically legal to pass proxy itself as <paramref name="target"/>, this would create stack overflow.
              In this case last interceptor in the pipeline mustn't call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/> or a <see cref="T:System.InvalidOperationException"/> will be throws.
            </remarks>
            <exception cref="T:System.InvalidCastException">Thrown when <paramref name="target"/> is not assignable to the proxied type.</exception>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget.ChangeProxyTarget(System.Object)">
            <summary>
              Permanently changes the target object of the proxy. This does not affect target of the current invocation.
            </summary>
            <param name="target">The new value of target of the proxy.</param>
            <remarks>
              Although the method takes <see cref="T:System.Object"/> the actual instance must be of type assignable to proxy's target type, otherwise an <see cref="T:System.InvalidCastException"/> will be thrown.
              Also while it's technically legal to pass null reference (Nothing in Visual Basic) as <paramref name="target"/>, for obvious reasons Dynamic Proxy will not be able to call the intercepted method on such target.
              In this case last interceptor in the pipeline mustn't call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/> or a <see cref="T:System.NotImplementedException"/> will be throws.
              Also while it's technically legal to pass proxy itself as <paramref name="target"/>, this would create stack overflow.
              In this case last interceptor in the pipeline mustn't call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/> or a <see cref="T:System.InvalidOperationException"/> will be throws.
            </remarks>
            <exception cref="T:System.InvalidCastException">Thrown when <paramref name="target"/> is not assignable to the proxied type.</exception>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyConstructorImplementation.SkipConstructor">
            <summary>
            Do not generate a constructor. The proxy class will not
            be constructible with the specified constructor when this option is used.
            This is the default for not visible base constructors.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyConstructorImplementation.CallBase">
            <summary>
            Call the base constructor from the proxy constructor. This is the default for
            visible base constructors.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyConstructorImplementation.DoNotCallBase">
            <summary>
            Do not call the base constructor from the proxy constructor.
            The generated code will fail verification with PEVerify and will only
            run in full trust. Under partial trust the runtime will throw VerificationException
            when an attempt is made to execute the code.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.ConstructorImplementationAnalysis.IsBaseVisible">
            <summary>
            True if the base member is visible (public or internal with InternalsVisibleTo)
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor">
            <summary>
              New interface that is going to be used by DynamicProxy 2
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptorSelector">
            <summary>
              Provides an extension point that allows proxies to choose specific interceptors on
              a per method basis.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptorSelector.SelectInterceptors(System.Type,System.Reflection.MethodInfo,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Selects the interceptors that should intercept calls to the given <paramref name="method"/>.
            </summary>
            <param name="type">The type declaring the method to intercept.</param>
            <param name="method">The method that will be intercepted.</param>
            <param name="interceptors">All interceptors registered with the proxy.</param>
            <returns>An array of interceptors to invoke upon calling the <paramref name="method"/>.</returns>
            <remarks>
              This method is called only once per proxy instance, upon the first call to the
              <paramref name="method"/>. Either an empty array or null are valid return values to indicate
              that no interceptor should intercept calls to the method. Although it is not advised, it is
              legal to return other <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementations than these provided in
              <paramref name="interceptors"/>.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Internal.AttributeUtil.AddDisassembler``1(Telerik.JustMock.Core.Castle.DynamicProxy.IAttributeDisassembler)">
            <summary>
              Registers custom disassembler to handle disassembly of specified type of attributes.
            </summary>
            <typeparam name="TAttribute">Type of attributes to handle</typeparam>
            <param name="disassembler">Disassembler converting existing instances of Attributes to CustomAttributeBuilders</param>
            <remarks>
              When disassembling an attribute Dynamic Proxy will first check if an custom disassembler has been registered to handle attributes of that type, 
              and if none is found, it'll use the <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.Internal.AttributeUtil.FallbackDisassembler"/>.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Internal.AttributeUtil.ShouldSkipAttributeReplication(System.Type)">
            <summary>
              Attributes should be replicated if they are non-inheritable,
              but there are some special cases where the attributes means
              something to the CLR, where they should be skipped.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Internal.InternalsUtilExtensions.IsInternal(System.Reflection.MethodBase)">
            <summary>
              Determines whether the specified method is internal.
            </summary>
            <param name = "method">The method.</param>
            <returns>
              <c>true</c> if the specified method is internal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Internal.InternalsUtil.IsInternalToDynamicProxy(System.Reflection.Assembly)">
            <summary>
              Determines whether this assembly has internals visible to dynamic proxy.
            </summary>
            <param name = "asm">The assembly to inspect.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Internal.InternalsUtil.IsAccessible(System.Reflection.MethodBase)">
            <summary>
              Checks if the method is public or protected.
            </summary>
            <param name = "method"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Internal.TypeUtil.GetAllInterfaces(System.Type[])">
            <summary>
              Returns list of all unique interfaces implemented given types, including their base interfaces.
            </summary>
            <param name="types"> </param>
            <returns> </returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyTargetAccessor.DynProxyGetTarget">
            <summary>
              Get the proxy target (note that null is a valid target!)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyTargetAccessor.GetInterceptors">
            <summary>
              Gets the interceptors for the proxy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.MixinData.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
              Because we need to cache the types based on the mixed in mixins, we do the following here:
              - Get all the mixin interfaces
              - Sort them by full name
              - Return them by position
            
            The idea is to have reproducible behavior for the case that mixins are registered in different orders.
            This method is here because it is required 
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope">
            <summary>
              Summary description for ModuleScope.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.DEFAULT_FILE_NAME">
            <summary>
              The default file name used when the assembly is saved using <see cref="F:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.DEFAULT_FILE_NAME"/>.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.DEFAULT_ASSEMBLY_NAME">
            <summary>
              The default assembly (simple) name used for the assemblies generated by a <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/> class; assemblies created by this instance will not be saved.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.#ctor(System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/> class, allowing to specify whether the assemblies generated by this instance
              should be saved.
            </summary>
            <param name="savePhysicalAssembly">If set to <c>true</c> saves the generated module.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.#ctor(System.Boolean,System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/> class, allowing to specify whether the assemblies generated by this instance
              should be saved.
            </summary>
            <param name="savePhysicalAssembly">If set to <c>true</c> saves the generated module.</param>
            <param name="disableSignedModule">If set to <c>true</c> disables ability to generate signed module. This should be used in cases where ran under constrained permissions.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.#ctor(System.Boolean,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/> class, allowing to specify whether the assemblies generated by this instance
              should be saved and what simple names are to be assigned to them.
            </summary>
            <param name="savePhysicalAssembly">If set to <c>true</c> saves the generated module.</param>
            <param name="disableSignedModule">If set to <c>true</c> disables ability to generate signed module. This should be used in cases where ran under constrained permissions.</param>
            <param name="strongAssemblyName">The simple name of the strong-named assembly generated by this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/>.</param>
            <param name="strongModulePath">The path and file name of the manifest module of the strong-named assembly generated by this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/>.</param>
            <param name="weakAssemblyName">The simple name of the weak-named assembly generated by this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/>.</param>
            <param name="weakModulePath">The path and file name of the manifest module of the weak-named assembly generated by this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/>.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.#ctor(System.Boolean,System.Boolean,Telerik.JustMock.Core.Castle.DynamicProxy.Generators.INamingScope,System.String,System.String,System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/> class, allowing to specify whether the assemblies generated by this instance
              should be saved and what simple names are to be assigned to them.
            </summary>
            <param name="savePhysicalAssembly">If set to <c>true</c> saves the generated module.</param>
            <param name="disableSignedModule">If set to <c>true</c> disables ability to generate signed module. This should be used in cases where ran under constrained permissions.</param>
            <param name="namingScope">Naming scope used to provide unique names to generated types and their members (usually via sub-scopes).</param>
            <param name="strongAssemblyName">The simple name of the strong-named assembly generated by this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/>.</param>
            <param name="strongModulePath">The path and file name of the manifest module of the strong-named assembly generated by this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/>.</param>
            <param name="weakAssemblyName">The simple name of the weak-named assembly generated by this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/>.</param>
            <param name="weakModulePath">The path and file name of the manifest module of the weak-named assembly generated by this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/>.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.GetFromCache(Telerik.JustMock.Core.Castle.DynamicProxy.Generators.CacheKey)">
            <summary>
              Returns a type from this scope's type cache, or null if the key cannot be found.
            </summary>
            <param name = "key">The key to be looked up in the cache.</param>
            <returns>The type from this scope's type cache matching the key, or null if the key cannot be found</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.RegisterInCache(Telerik.JustMock.Core.Castle.DynamicProxy.Generators.CacheKey,System.Type)">
            <summary>
              Registers a type in this scope's type cache.
            </summary>
            <param name = "key">The key to be associated with the type.</param>
            <param name = "type">The type to be stored in the cache.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.GetKeyPair">
            <summary>
              Gets the key pair used to sign the strong-named assembly generated by this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.ObtainDynamicModule(System.Boolean)">
            <summary>
              Gets the specified module generated by this scope, creating a new one if none has yet been generated.
            </summary>
            <param name = "isStrongNamed">If set to true, a strong-named module is returned; otherwise, a weak-named module is returned.</param>
            <returns>A strong-named or weak-named module generated by this scope, as specified by the <paramref
               name = "isStrongNamed" /> parameter.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.ObtainDynamicModuleWithStrongName">
            <summary>
              Gets the strong-named module generated by this scope, creating a new one if none has yet been generated.
            </summary>
            <returns>A strong-named module generated by this scope.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.ObtainDynamicModuleWithWeakName">
            <summary>
              Gets the weak-named module generated by this scope, creating a new one if none has yet been generated.
            </summary>
            <returns>A weak-named module generated by this scope.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.SaveAssembly">
            <summary>
              Saves the generated assembly with the name and directory information given when this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/> instance was created (or with
              the <see cref="F:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.DEFAULT_FILE_NAME"/> and current directory if none was given).
            </summary>
            <remarks>
              <para>
                This method stores the generated assembly in the directory passed as part of the module information specified when this instance was
                constructed (if any, else the current directory is used). If both a strong-named and a weak-named assembly
                have been generated, it will throw an exception; in this case, use the <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.SaveAssembly(System.Boolean)"/> overload.
              </para>
              <para>
                If this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/> was created without indicating that the assembly should be saved, this method does nothing.
              </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Both a strong-named and a weak-named assembly have been generated.</exception>
            <returns>The path of the generated assembly file, or null if no file has been generated.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.SaveAssembly(System.Boolean)">
            <summary>
              Saves the specified generated assembly with the name and directory information given when this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/> instance was created
              (or with the <see cref="F:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.DEFAULT_FILE_NAME"/> and current directory if none was given).
            </summary>
            <param name="strongNamed">True if the generated assembly with a strong name should be saved (see <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.StrongNamedModule"/>);
              false if the generated assembly without a strong name should be saved (see <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.WeakNamedModule"/>.</param>
            <remarks>
              <para>
                This method stores the specified generated assembly in the directory passed as part of the module information specified when this instance was
                constructed (if any, else the current directory is used).
              </para>
              <para>
                If this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/> was created without indicating that the assembly should be saved, this method does nothing.
              </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">No assembly has been generated that matches the <paramref name="strongNamed"/> parameter.
            </exception>
            <returns>The path of the generated assembly file, or null if no file has been generated.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.LoadAssemblyIntoCache(System.Reflection.Assembly)">
            <summary>
              Loads the generated types from the given assembly into this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/>'s cache.
            </summary>
            <param name="assembly">The assembly to load types from. This assembly must have been saved via <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.SaveAssembly(System.Boolean)"/> or
              <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.SaveAssembly"/>, or it must have the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Serialization.CacheMappingsAttribute"/> manually applied.</param>
            <remarks>
              This method can be used to load previously generated and persisted proxy types from disk into this scope's type cache, eg. in order
              to avoid the performance hit associated with proxy generation.
            </remarks>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.Lock">
            <summary>
              Users of this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/> should use this lock when accessing the cache.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.StrongNamedModule">
            <summary>
              Gets the strong-named module generated by this scope, or <see langword = "null" /> if none has yet been generated.
            </summary>
            <value>The strong-named module generated by this scope, or <see langword = "null" /> if none has yet been generated.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.StrongNamedModuleName">
            <summary>
              Gets the file name of the strongly named module generated by this scope.
            </summary>
            <value>The file name of the strongly named module generated by this scope.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.StrongNamedModuleDirectory">
            <summary>
              Gets the directory where the strongly named module generated by this scope will be saved, or <see langword="null"/> if the current directory
              is used.
            </summary>
            <value>The directory where the strongly named module generated by this scope will be saved when <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.SaveAssembly"/> is called
              (if this scope was created to save modules).</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.WeakNamedModule">
            <summary>
              Gets the weak-named module generated by this scope, or <see langword = "null" /> if none has yet been generated.
            </summary>
            <value>The weak-named module generated by this scope, or <see langword = "null" /> if none has yet been generated.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.WeakNamedModuleName">
            <summary>
              Gets the file name of the weakly named module generated by this scope.
            </summary>
            <value>The file name of the weakly named module generated by this scope.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.WeakNamedModuleDirectory">
            <summary>
              Gets the directory where the weakly named module generated by this scope will be saved, or <see langword="null"/> if the current directory
              is used.
            </summary>
            <value>The directory where the weakly named module generated by this scope will be saved when <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.SaveAssembly"/> is called
              (if this scope was created to save modules).</value>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.PersistentProxyBuilder">
            <summary>
              ProxyBuilder that persists the generated type.
            </summary>
            <remarks>
              The saved assembly contains just the last generated type.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.PersistentProxyBuilder.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.PersistentProxyBuilder"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.PersistentProxyBuilder.SaveAssembly">
            <summary>
              Saves the generated assembly to a physical file. Note that this renders the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.PersistentProxyBuilder"/> unusable.
            </summary>
            <returns>The path of the generated assembly file, or null if no assembly has been generated.</returns>
            <remarks>
              This method does not support saving multiple files. If both a signed and an unsigned module have been generated, use the 
              respective methods of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/>.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions.#ctor(Telerik.JustMock.Core.Castle.DynamicProxy.IProxyGenerationHook)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions"/> class.
            </summary>
            <param name="hook">The hook.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions"/> class.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator">
            <summary>
              Provides proxy objects for classes and interfaces.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.#ctor(Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator"/> class.
            </summary>
            <param name="builder">Proxy types builder.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.#ctor(System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator"/> class.
            </summary>
            <param name="disableSignedModule">If <c>true</c> forces all types to be generated into an unsigned module.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTarget``1(``0,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface implemented by <paramref name="target"/> which will be proxied.</typeparam>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>Object proxying calls to members of <typeparamref name="TInterface"/> on <paramref name="target"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/>is not an interface type.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method generates new proxy type for each type of <paramref name="target"/>, which affects performance. If you don't want to proxy types differently depending on the type of the target
              use <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface``1(``0,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])"/> method.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTarget``1(``0,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface implemented by <paramref name="target"/> which will be proxied.</typeparam>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <typeparamref name="TInterface"/> on <paramref name="target"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/>is not an interface type.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method generates new proxy type for each type of <paramref name="target"/>, which affects performance. If you don't want to proxy types differently depending on the type of the target
              use <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface``1(``0,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])"/> method.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTarget(System.Type,System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> type on <paramref name="target"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method generates new proxy type for each type of <paramref name="target"/>, which affects performance. If you don't want to proxy types differently depending on the type of the target
              use <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])"/> method.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTarget(System.Type,System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> type on <paramref name="target"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method generates new proxy type for each type of <paramref name="target"/>, which affects performance. If you don't want to proxy types differently depending on the type of the target
              use <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])"/> method.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTarget(System.Type,System.Type[],System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types  on <paramref name="target"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method generates new proxy type for each type of <paramref name="target"/>, which affects performance. If you don't want to proxy types differently depending on the type of the target
              use <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Type[],System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])"/> method.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTarget(System.Type,System.Type[],System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types on <paramref name="target"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method generates new proxy type for each type of <paramref name="target"/>, which affects performance. If you don't want to proxy types differently depending on the type of the target
              use <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Type[],System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])"/> method.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
              Interceptors can use <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget"/> interface to provide other target for method invocation than default <paramref name="target"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> type on <paramref name="target"/> object or alternative implementation swapped at runtime by an interceptor.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface``1(``0,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
              Interceptors can use <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget"/> interface to provide other target for method invocation than default <paramref name="target"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface implemented by <paramref name="target"/> which will be proxied.</typeparam>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <typeparamref name="TInterface"/> type on <paramref name="target"/> object or alternative implementation swapped at runtime by an interceptor.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/> is not an interface type.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface``1(``0,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
              Interceptors can use <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget"/> interface to provide other target for method invocation than default <paramref name="target"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface implemented by <paramref name="target"/> which will be proxied.</typeparam>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <typeparamref name="TInterface"/> type on <paramref name="target"/> object or alternative implementation swapped at runtime by an interceptor.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/> is not an interface type.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Type[],System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
              Interceptors can use <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget"/> interface to provide other target for method invocation than default <paramref name="target"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types on <paramref name="target"/> object or alternative implementation swapped at runtime by an interceptor.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
              Interceptors can use <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget"/> interface to provide other target for method invocation than default <paramref name="target"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> type on <paramref name="target"/> object or alternative implementation swapped at runtime by an interceptor.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Type[],System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
              Interceptors can use <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget"/> interface to provide other target for method invocation than default <paramref name="target"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types on <paramref name="target"/> object or alternative implementation swapped at runtime by an interceptor.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget``1(Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor)">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on target object generated at runtime with given <paramref name="interceptor"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface which will be proxied.</typeparam>
            <param name="interceptor">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <typeparamref name="TInterface"/> types on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptor"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              As a result of that also at least one <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementation must be provided.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget``1(Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on target object generated at runtime with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface which will be proxied.</typeparam>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <typeparamref name="TInterface"/> types on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              As a result of that also at least one <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementation must be provided.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget``1(Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on target object generated at runtime with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface which will be proxied.</typeparam>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <typeparamref name="TInterface"/> types on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              As a result of that also at least one <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementation must be provided.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor)">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on target object generated at runtime with given <paramref name="interceptor"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface which will be proxied.</param>
            <param name="interceptor">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> type on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptor"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on target object generated at runtime with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface which will be proxied.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> type on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on target object generated at runtime with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on target object generated at runtime with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface which will be proxied.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/>  is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <remarks>
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on target object generated at runtime with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface which will be proxied.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of <paramref name="additionalInterfacesToProxy"/> to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget``1(``0,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <typeparamref name="TClass"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TClass">Type of class which will be proxied.</typeparam>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <typeparamref name="TClass"/> proxying calls to virtual members of <typeparamref name="TClass"/> type.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TClass"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <typeparamref name="TClass"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <typeparamref name="TClass"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget``1(``0,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <typeparamref name="TClass"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TClass">Type of class which will be proxied.</typeparam>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <typeparamref name="TClass"/> proxying calls to virtual members of <typeparamref name="TClass"/> type.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TClass"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <typeparamref name="TClass"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <typeparamref name="TClass"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Type[],System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,System.Object[],Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="constructorArguments">Arguments of constructor of type <paramref name="classToProxy"/> which should be used to create a new instance of that type.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no constructor exists on type <paramref name="classToProxy"/> with parameters matching <paramref name="constructorArguments"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Object,System.Object[],Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="constructorArguments">Arguments of constructor of type <paramref name="classToProxy"/> which should be used to create a new instance of that type.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no constructor exists on type <paramref name="classToProxy"/> with parameters matching <paramref name="constructorArguments"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no parameterless constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="options"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Type[],System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="options"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Type[],System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,System.Object[],Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="constructorArguments">Arguments of constructor of type <paramref name="classToProxy"/> which should be used to create a new instance of that type.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="options"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no constructor exists on type <paramref name="classToProxy"/> with parameters matching <paramref name="constructorArguments"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxy``1(Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <typeparamref name="TClass"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TClass">Type of class which will be proxied.</typeparam>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <typeparamref name="TClass"/> proxying calls to virtual members of <typeparamref name="TClass"/> type.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TClass"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <typeparamref name="TClass"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <typeparamref name="TClass"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxy``1(Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <typeparamref name="TClass"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TClass">Type of class which will be proxied.</typeparam>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <typeparamref name="TClass"/> proxying calls to virtual members of <typeparamref name="TClass"/> type.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TClass"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <typeparamref name="TClass"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <typeparamref name="TClass"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,System.Object[],Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="constructorArguments">Arguments of constructor of type <paramref name="classToProxy"/> which should be used to create a new instance of that type.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no constructor exists on type <paramref name="classToProxy"/> with parameters matching <paramref name="constructorArguments"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,System.Object[],Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="constructorArguments">Arguments of constructor of type <paramref name="classToProxy"/> which should be used to create a new instance of that type.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no constructor exists on type <paramref name="classToProxy"/> with parameters matching <paramref name="constructorArguments"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no parameterless constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="options"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="options"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,System.Object[],Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="constructorArguments">Arguments of constructor of type <paramref name="classToProxy"/> which should be used to create a new instance of that type.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="options"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no constructor exists on type <paramref name="classToProxy"/> with parameters matching <paramref name="constructorArguments"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxyType(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates the proxy type for class proxy with given <paramref name="classToProxy"/> class, implementing given <paramref name="additionalInterfacesToProxy"/> and using provided <paramref name="options"/>.
            </summary>
            <param name="classToProxy">The base class for proxy type.</param>
            <param name="additionalInterfacesToProxy">The interfaces that proxy type should implement.</param>
            <param name="options">The options for proxy generation process.</param>
            <returns><see cref="T:System.Type"/> of proxy.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithTarget(System.Type,System.Type[],System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates the proxy type for interface proxy with target for given <paramref name="interfaceToProxy"/> interface, implementing given <paramref name="additionalInterfacesToProxy"/> on given <paramref name="targetType"/> and using provided <paramref name="options"/>.
            </summary>
            <param name="interfaceToProxy">The interface proxy type should implement.</param>
            <param name="additionalInterfacesToProxy">The additional interfaces proxy type should implement.</param>
            <param name="targetType">Actual type that the proxy type will encompass.</param>
            <param name="options">The options for proxy generation process.</param>
            <returns><see cref="T:System.Type"/> of proxy.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithTargetInterface(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates the proxy type for interface proxy with target interface for given <paramref name="interfaceToProxy"/> interface, implementing given <paramref name="additionalInterfacesToProxy"/> on given <paramref name="interfaceToProxy"/> and using provided <paramref name="options"/>.
            </summary>
            <param name="interfaceToProxy">The interface proxy type should implement.</param>
            <param name="additionalInterfacesToProxy">The additional interfaces proxy type should implement.</param>
            <param name="options">The options for proxy generation process.</param>
            <returns><see cref="T:System.Type"/> of proxy.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates the proxy type for interface proxy without target for given <paramref name="interfaceToProxy"/> interface, implementing given <paramref name="additionalInterfacesToProxy"/> and using provided <paramref name="options"/>.
            </summary>
            <param name="interfaceToProxy">The interface proxy type should implement.</param>
            <param name="additionalInterfacesToProxy">The additional interfaces proxy type should implement.</param>
            <param name="options">The options for proxy generation process.</param>
            <returns><see cref="T:System.Type"/> of proxy.</returns>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.Logger">
            <summary>
              Gets or sets the <see cref="T:Telerik.JustMock.Core.Castle.Core.Logging.ILogger"/> that this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator"/> log to.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.ProxyBuilder">
            <summary>
              Gets the proxy builder instance used to generate proxy types.
            </summary>
            <value>The proxy builder.</value>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Serialization.CacheMappingsAttribute">
            <summary>
              Applied to the assemblies saved by <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/> in order to persist the cache data included in the persisted assembly.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Serialization.ProxyObjectReference">
            <summary>
              Handles the deserialization of proxies.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Serialization.ProxyObjectReference.ResetScope">
            <summary>
              Resets the <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.Serialization.ProxyObjectReference.ModuleScope"/> used for deserialization to a new scope.
            </summary>
            <remarks>
              This is useful for test cases.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Serialization.ProxyObjectReference.SetScope(Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope)">
            <summary>
              Resets the <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.Serialization.ProxyObjectReference.ModuleScope"/> used for deserialization to a given <paramref name="scope"/>.
            </summary>
            <param name="scope"> The scope to be used for deserialization. </param>
            <remarks>
              By default, the deserialization process uses a different scope than the rest of the application, which can lead to multiple proxies
              being generated for the same type. By explicitly setting the deserialization scope to the application's scope, this can be avoided.
            </remarks>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.Serialization.ProxyObjectReference.ModuleScope">
            <summary>
              Gets the <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.Serialization.ProxyObjectReference.ModuleScope"/> used for deserialization.
            </summary>
            <value> As <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Serialization.ProxyObjectReference"/> has no way of automatically determining the scope used by the application (and the application might use more than one scope at the same time), <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Serialization.ProxyObjectReference"/> uses a dedicated scope instance for deserializing proxy types. This instance can be reset and set to a specific value via <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.Serialization.ProxyObjectReference.ResetScope"/> and <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.Serialization.ProxyObjectReference.SetScope(Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope)"/> . </value>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Serialization.RemotableInvocation.Proceed">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.Serialization.RemotableInvocation.Method">
            <summary>
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.Serialization.RemotableInvocation.MethodInvocationTarget">
            <summary>
              For interface proxies, this will point to the
              <see cref="T:System.Reflection.MethodInfo"/> on the target class
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Tokens.InvocationMethods">
            <summary>
              Holds <see cref="T:System.Reflection.MethodInfo"/> objects representing methods of <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.AbstractInvocation"/> class.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Tokens.SerializationInfoMethods">
            <summary>
              Holds <see cref="T:System.Reflection.MethodInfo"/> objects representing methods of <see cref="T:System.Runtime.Serialization.SerializationInfo"/> class.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.DynamicProxy.Tokens.SerializationInfoMethods.AddValue_Bool">
            <summary>
              <see cref="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Boolean)"/>
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.DynamicProxy.Tokens.SerializationInfoMethods.AddValue_Int32">
            <summary>
              <see cref="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int32)"/>
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.DynamicProxy.Tokens.SerializationInfoMethods.AddValue_Object">
            <summary>
              <see cref="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object)"/>
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.DynamicProxy.Tokens.SerializationInfoMethods.GetValue">
            <summary>
              <see cref="M:System.Runtime.Serialization.SerializationInfo.GetValue(System.String,System.Type)"/>
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.DynamicProxy.Tokens.SerializationInfoMethods.SetType">
            <summary>
              <see cref="M:System.Runtime.Serialization.SerializationInfo.SetType(System.Type)"/>
            </summary>
        </member>
        <member name="T:Telerik.JustMock.MockException">
            <summary>
            Mock exception.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockException"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockException"/> class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Telerik.JustMock.MockException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockException"/> class.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Telerik.JustMock.Core.Expressions.ExpressionComparer">
            <summary>
            Compare two expressions to determine if they are equivalent
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Action`5">
             <summary>
             Encapsulates a method that has 5 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`6">
             <summary>
             Encapsulates a method that has 6 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`7">
             <summary>
             Encapsulates a method that has 7 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`8">
             <summary>
             Encapsulates a method that has 8 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`9">
             <summary>
             Encapsulates a method that has 9 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`10">
             <summary>
             Encapsulates a method that has 10 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`11">
             <summary>
             Encapsulates a method that has 11 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`12">
             <summary>
             Encapsulates a method that has 12 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`13">
             <summary>
             Encapsulates a method that has 13 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`14">
             <summary>
             Encapsulates a method that has 14 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`15">
             <summary>
             Encapsulates a method that has 15 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`16">
             <summary>
             Encapsulates a method that has 16 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Arg">
            <summary>
            Allows specification of a matching condition for an argument, rather
            a specific value.
            </summary>
            <summary>
            Provides various argument matching shortcuts.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Arg.Matches``1(System.Linq.Expressions.Expression{System.Predicate{``0}})">
            <summary>
            Matches argument for the expected condition.
            </summary>
            <typeparam name="T">
            Contains the type of the argument.
            </typeparam>
            <param name="match">Matcher expression</param>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.Arg.IsInRange``1(``0,``0,Telerik.JustMock.RangeKind)">
            <summary>
            Matches argument for the specified range.
            </summary>
            <typeparam name="T">Type of the argument.</typeparam>
            <param name="from">starting value.</param>
            <param name="to">ending value.</param>
            <param name="kind">Kind of Range</param>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.Arg.IsAny``1">
            <summary>
            Matches argument for any value.
            </summary>
            <typeparam name="T">Type for the argument</typeparam>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.Arg.IsNull``1">
            <summary>
            Matches argument for null value.
            </summary>
            <typeparam name="T">Type for the argument</typeparam>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.Arg.Is``1(``0)">
            <summary>
            Matches the specified value. Useful for mingling concrete values and more general matchers
            in the same expression when using delegate-based overloads.
            </summary>
            <typeparam name="T">Type for the argument</typeparam>
            <param name="value">Value to match</param>
            <returns>Argument type</returns>
        </member>
        <member name="P:Telerik.JustMock.Arg.NullOrEmpty">
            <summary>
            Matches argument for null or empty value.
            </summary>
            <returns>Null</returns>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyInt">
            <summary>
            Gets a value indicating that argument can contain any int value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyFloat">
            <summary>
            Gets a value indicating that argument can contain any float value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyDouble">
            <summary>
            Gets a value indicating that argument can contain any double value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyDecimal">
            <summary>
            Gets a value indicating that argument can contain any decimal value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyLong">
            <summary>
            Gets a value indicating that argument can contain any long value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyChar">
            <summary>
            Gets a value indicating that argument can contain any char value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyString">
            <summary>
            Gets a value indicating that argument can contain any string value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyObject">
            <summary>
            Gets a value indicating that argument can contain any object value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyShort">
            <summary>
            Gets a value indicating that argument can contain any short value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyBool">
            <summary>
            Gets a value indicating that argument can contain any bool value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyGuid">
            <summary>
            Gets a value indicating that argument can contain any Guid value.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.ArgExpr">
            <summary>
            Allows specification of a matching condition for an argument for a non-public method, rather
            a specific value.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.ArgExpr.IsAny``1">
            <summary>
            Matches argument for any value.
            </summary>
            <typeparam name="T">Type for the argument</typeparam>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.ArgExpr.Matches``1(System.Linq.Expressions.Expression{System.Predicate{``0}})">
            <summary>
            Matches argument for the expected condition.
            </summary>
            <typeparam name="T">
            Contains the type of the argument.
            </typeparam>
            <param name="match">Matcher expression</param>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.ArgExpr.IsNull``1">
            <summary>
            Matches argument for null value.
            </summary>
            <typeparam name="T">Type for the argument</typeparam>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.ArgExpr.Out``1(``0)">
            <summary>
            Matches a value for out argument
            </summary>
            <typeparam name="T">Type for the argument</typeparam>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.ArgExpr.Ref``1(``0)">
            <summary>
            Matches a value for ref argument
            </summary>
            <typeparam name="T">Type for the argument</typeparam>
            <returns>Argument type</returns>
        </member>
        <member name="T:Telerik.JustMock.Args">
            <summary>
            Specifies Mock.Assert to ignore any specific arguments.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Args.Ignore">
            <summary>
            Marks that Mock.Assert should ignore any argument match.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Args.NotSpecified">
            <summary>
            Default behavior
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Args.IsIgnored">
            <summary>
            Gets or sets value indicating whethere to ignore arguments.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Behavior">
            <summary>
            Specifies the behavior of the mock.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Behavior.Loose">
            <summary>
            Specifies that by default mock calls will behave like a stub, unless explicitly setup.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Behavior.Strict">
            <summary>
            Specifies that any calls made on the mock 
            will throw an exception if not explictly set.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Behavior.CallOriginal">
            <summary>
            Specifies that by default all calls made on mock will invoke its 
            corresponding original member unless some expecations are set.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Constructor">
            <summary>
            Defines the behavior of target constructor.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Constructor.NotMocked">
            <summary>
            Specifies that the constructor should not be mocked. 
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Constructor.Mocked">
            <summary>
            Specifies that the constructor should be mocked
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.IMockMixin.Repository">
            <summary>
            The repository that created this mock, or the repository that
            made the last arrangement for this mock, if this mock has been used
            in different contexts.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.IMockMixin.Originator">
            <summary>
            The repository that first created this mock mixin.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.IMockMixin.DependentMocks">
            <summary>
            A collection of mocks that are dependent on this one. Dependent mocks
            are recursively asserted. Dependent mocks are added for example by arranging a call
            on this mock to return another mock.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.IMockMixin.SupplementaryBehaviors">
            <summary>
            Behaviors that are processed after the behaviors for any method mock are processed.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.IMockMixin.FallbackBehaviors">
            <summary>
            Behaviors to process when there was no method mock for a dispatched invocation.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.IMockMixin.ExternalizedMock">
            <summary>
            Set to the object for which this instance is an external mock mixin
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.MocksRepository.CreateMatcherForArgument(System.Object)">
            <summary>
            Converts the given object to a matcher as follows. This method is most useful for
            creating a matcher out of an argument expression.
            
            It works as follows:
            If the object is not an expression, then a value matcher for that object is returned.
            If the object is an expression then:
            * if the top of the expression is a method call expression and the member
                has the ArgMatcherAttribute then the specific matcher type is instantiaded
                with the parameters passed to the method call expression and returned.
                If the matcher type is generic, then it is defined with the type of the expression.
            * if the top expression is a member or method call and the member
                has the ArgIgnoreAttribute, then a TypeMatcher is returned
            * otherwise, the expression is evaluated and a ValueMatcher is returned
            </summary>
            <param name="argumentObj"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.MockAssertionFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockAssertionFailedException"/> class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Telerik.JustMock.Param">
            <summary>
            Defines parameter placeholders when the parameter type is one of the commonly occurring types, e.g. int.
            Example: Mock.Create&lt;IEqualityComparer&gt;(me => me.Equals(Arg.AnyObject, Arg.AnyObject) == Equals(Param._1, Param._2));
            In the example, Param._1 and Param._2 are implicitly converted to System.Object.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.PrivateAccessor">
            <summary>
            Gives access to the non-public members of a type or instance. This class provides functionality similar to the
            one that exists in regular reflection classes with the added benefit that it can bypass essential security checks related
            to accessing non-public members through reflection.
            When the profiler is enabled, PrivateAccessor acquires additional power:
            - It can even be used to access all kinds of non-public members in Silverlight (and when running in partial trust in general).
            - All calls made through PrivateAccessor are always made with full trust (unrestricted) permissions.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.#ctor(System.Object)">
            <summary>
            Creates a new <see cref="T:Telerik.JustMock.PrivateAccessor"/> wrapping the given instance. Can be used to access both instance and static members.
            </summary>
            <param name="instance">The instance to wrap.</param>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.ForType(System.Type)">
            <summary>
            Creates a new <see cref="T:Telerik.JustMock.PrivateAccessor"/> wrapping the given type. Can be used to access the static members of a type.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.CallMethod(System.String,System.Object[])">
            <summary>
            Calls the specified method by name.
            </summary>
            <param name="name">The name of the method to call.</param>
            <param name="args">Arguments to pass to the method.</param>
            <returns>The value returned by the specified method.</returns>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.CallMethod(System.Reflection.MethodBase,System.Object[])">
            <summary>
            Calls the specified method.
            </summary>
            <param name="method">The method to call.</param>
            <param name="args">Arguments to pass to the method.</param>
            <returns>Return value of the method.</returns>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.GetIndex(System.Object)">
            <summary>
            Gets the value returned by the indexer (<code>this[T index]</code> in C#) for the specified index value.
            </summary>
            <param name="index">The index argument to pass to the indexer.</param>
            <returns>The value returned by the indexer.</returns>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.GetProperty(System.String,System.Object[])">
            <summary>
            Gets the value of a property by name.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="indexArgs">Optional index arguments if the property has any.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.SetIndex(System.Object,System.Object)">
            <summary>
            Sets a value to the indexer (<code>this[T index]</code> in C#) for the specified index value.
            </summary>
            <param name="index">The index argument to pass to the indexer.</param>
            <param name="value">The value to give to the indexer.</param>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.SetProperty(System.String,System.Object,System.Object[])">
            <summary>
            Sets the value of a property by name.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value to set to the property.</param>
            <param name="indexArgs">Optional index arguments if the property has any.</param>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.GetField(System.String)">
            <summary>
            Gets the value of a field.
            </summary>
            <param name="name">The name of the field.</param>
            <returns>The value of the field</returns>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.SetField(System.String,System.Object)">
            <summary>
            Sets the value of a field.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="value">The new value of the field.</param>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IAction`1">
            <summary>
            Defines common expecations.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1">
            <summary>
            Defines members for setting up delegate to execute as mehtod body.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead(System.Action)">
            <summary>
            Specifies the delegate that will execute for the expected method.
            </summary>
            <param name="action">delegate the method body</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``1(``0)">
            <summary>
            Specifies the delegate that will execute for the expected method.
            </summary>
            <param name="delegate">Target delegate to evaluate.</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead(System.Delegate)">
            <summary>
            Specifies the delegate that will execute for the expected method.
            </summary>
            <param name="delegate">Target delegate to evaluate.</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``1(System.Action{``0})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``2(System.Action{``0,``1})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``3(System.Action{``0,``1,``2})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``4(System.Action{``0,``1,``2,``3})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``5(Telerik.JustMock.Action{``0,``1,``2,``3,``4})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``6(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``7(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``8(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``9(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``10(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``11(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``12(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``13(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``14(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T14">Type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``15(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T14">Type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T15">Type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``16(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T14">Type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T15">Type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T16">Type of the sixteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IThrows`1.Throws(System.Exception)">
            <summary>
            Throws a the specified expection for target call.
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IThrows`1.Throws``1">
            <summary>
            Throws a the specified expection for target call.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IThrows`1.Throws``1(System.Object[])">
            <summary>
            Throws a the specified expection for target call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IAssertable">
            <summary>
            Mark the statement as assertable in <see cref="M:Telerik.JustMock.Mock.Assert``1(``0)"/>.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IMustBeCalled">
            <summary>
            Defines an operation that marks a expectation as must.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IMustBeCalled.MustBeCalled">
            <summary>
            Specifies that the mock call should be invoked to pass <see cref="M:Telerik.JustMock.Mock.Assert``1(``0)"/>
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.ISetupBehavior">
            <summary>
            Defines the expected behavior for a setup.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.ISetupBehavior.InSequence">
            <summary>
            Specifies that justmock should invoke different mock instance for each setup.
            </summary>
            <remarks>
            When this modifier is applied
            for similar type call, the flow of setups will be maintained.
            </remarks>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IOccurrence">
            <summary>
            Defines occurrence for a specific call.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IOccurrence.Occurs(System.Int32)">
            <summary>
            Specifies how many times the call should occur.
            </summary>
            <param name="numberOfTimes">Specified number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IOccurrence.OccursAtLeast(System.Int32)">
            <summary>
            Specifies how many times atleast the call should occur.
            </summary>
            <param name="numberOfTimes">Specified number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IOccurrence.OccursAtMost(System.Int32)">
            <summary>
            Specifies how many times maximum the call can occur.
            </summary>
            <param name="numberOfTimes">Specified number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IOccurrence.OccursOnce">
            <summary>
            Specifies that the call must occur once.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IOccurrence.OccursNever">
            <summary>
            Specifies that the call must never occur.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IOrder">
            <summary>
            Defines the order for mock setups.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IOrder.InOrder">
            <summary>
            Specifies a call should occur in a specific order.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAssertable.CallOriginal">
            <summary>
            Use it to call the real implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Raises(System.Action,System.Object[])">
            <summary>
             Raises the expected with sepecic arguments
            </summary>
            <param name="eventExpression"></param>
            <param name="args"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Raises(System.Action,System.EventArgs)">
            <summary>
             Raises the expected with sepecic arguments
            </summary>
            <param name="eventExpression"></param>
            <param name="args">Event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Raises``1(System.Action,System.Func{``0,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Raises``2(System.Action,System.Func{``0,``1,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Raises``3(System.Action,System.Func{``0,``1,``2,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Raises``4(System.Action,System.Func{``0,``1,``2,``3,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.DoNothing">
            <summary>
             Specfies call a to step over (loose mocks only).
            </summary>
            <remarks>
            For loose mocks by default the behavior is step over.
            </remarks>
            <returns>Refarence to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/></returns>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IFunc`1">
            <summary>
            Interface containing Func type method expecatations.
            </summary>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns(`0)">
            <summary>	
            Specifies the return value for the expected method.
            </summary>
            <param name="value">any object value</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns(System.Func{`0})">
            <summary>
            Specifies the delegate to evaluate and return for the expected method.
            </summary>
            <param name="func">Target delegate to evaluate</param>
            <returns>Refarence to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns(System.Func{`0,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``1(System.Func{``0,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``2(System.Func{``0,``1,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``3(System.Func{``0,``1,``2,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``4(System.Func{``0,``1,``2,``3,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``5(Telerik.JustMock.Func{``0,``1,``2,``3,``4,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``6(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``7(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``8(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``9(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``10(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``11(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``12(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``13(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``14(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``15(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T15">Type of the fifteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``16(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T15">Type of the fifteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T16">Type of the sixteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.ReturnsCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a enumerable collecton for the target query.
            </summary>
            <typeparam name="TArg">Argument type</typeparam>
            <typeparam name="TReturn">Return type for the collection</typeparam>
            <param name="funcExpectation">Defines the setup instance under which the collection will be set.</param>
            <param name="collection">Enumerable colleciton</param>
            <returns>Instance of <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IIgnorable`1.IgnoreArguments">
            <summary>
            Specifies to ignore any argument for the target call.
            </summary>
            <returns>Func or Action Container</returns>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IInstanceScope`1">
            <summary>
            Specifies instance scope for the expectation.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IInstanceScope`1.IgnoreInstance">
            <summary>
            Defines that the expectation should occur for all instance.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation">
            <summary>
            Defines methods to mock non-public members.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Arrange(System.Object,System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <param name="target">Target instance</param>
            <param name="memberName">Member name</param>
            <param name="args">Mehtod arguments</param>
            <returns>Refernce to setup actions calls</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Arrange``1(System.Object,System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <typeparam name="TReturn">Return type</typeparam>
            <param name="target">Target instance.</param>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="memberName">Name of the member</param>
            <typeparam name="TReturn">Return type of the method</typeparam>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert(System.Object,System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert``1(System.Object,System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <typeparam name="TReturn">Return type of the method</typeparam>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert(System.Object,System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Arrange``2(System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <typeparam name="T">Type of the target.</typeparam>
            <typeparam name="TReturn">Return type</typeparam>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Arrange``1(System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <typeparam name="T">Type of the target.</typeparam>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Arrange``1(System.Type,System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <typeparam name="TReturn">Return type</typeparam>
            <param name="targetType">Target type</param>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Arrange(System.Type,System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <param name="targetType">Target type</param>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert``1(System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="T">Specify the target type</typeparam>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert``2(System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="T">Specify the target type</typeparam>
            <typeparam name="TReturn">Specify the return type for the method</typeparam>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert(System.Type,System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="targetType">Type of the target</param>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert``1(System.Type,System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="targetType">Type of the target</param>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert``1(System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="T">Specify the target type</typeparam>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert``2(System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="T">Specify the target type</typeparam>
            <typeparam name="TReturn">Specify the return type for the method</typeparam>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert(System.Type,System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="targetType">Type of the target</param>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert``1(System.Type,System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="TReturn">Sepcify the return type method</typeparam>
            <param name="targetType">Type of the target</param>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Initialize``1(System.String,System.Object[])">
            <summary>
            Initializes interceptor  for the specified type.
            </summary>
            <remarks>
            The method is useful for setting up non default framework types during class initialization
            as well as pre-intercepting concrete members for future mocking.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Initialize(System.Type,System.String,System.Object[])">
            <summary>
            Initializes interceptor  for the specified type.
            </summary>
            <remarks>
            The method is useful for setting up non default framework types during class initialization
            as well as pre-intercepting concrete members for future mocking.
            </remarks>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IReturnCollection">
            <summary>
            Defines member for mocking <see cref="T:System.Linq.IQueryable"/> collection.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IReturnCollection.ReturnsCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a enumerable collecton for the target query.
            </summary>
            <typeparam name="TArg">Argument type</typeparam>
            <typeparam name="TReturn">Return type for the collection</typeparam>
            <param name="funcExpectation">Defines the setup instance under which the collection will be set.</param>
            <param name="collection">Enumerable colleciton</param>
            <returns>Instance of <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/></returns>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IWaitDuration">
            <summary>
            Defines the time to wait before an event can be raised.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Expectations.Abstraction.IWaitDuration.Miliseconds">
            <summary>
            Number of miliseconds to wait for executing the event.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.ActionExpectation">
            <summary>
            Defines action related setups.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.CommonExpectation`1">
            <summary>
            Implements common expecations.
            </summary>
            <summary>
            Implements common expecations.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead(System.Action)">
            <summary>
            Defines the body of the expected method that will be executed instead of the orginal method body.
            </summary>
            <param name="action">delegate the method body</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``1(``0)">
            <summary>
            Specifies the delegate that will execute for the expected method.
            </summary>
            <param name="delegate">Target delegate to evaluate.</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead(System.Delegate)">
            <summary>
            Specifies the delegate that will execute for the expected method.
            </summary>
            <param name="delegate">Target delegate to evaluate.</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Raises(System.Action,System.Object[])">
            <summary>
             Raises the expected with sepecic arguments
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Raises(System.Action,System.EventArgs)">
            <summary>
             Raises the expected event with provided <see cref="T:System.EventArgs"/>.
            </summary>
            <param name="eventExpression"></param>
            <param name="args">Event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Raises``1(System.Action,System.Func{``0,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">Function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Raises``2(System.Action,System.Func{``0,``1,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Raises``3(System.Action,System.Func{``0,``1,``2,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Raises``4(System.Action,System.Func{``0,``1,``2,``3,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Throws(System.Exception)">
            <summary>
            Throws a the specified expection for target call.
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Throws``1">
            <summary>
            Throws a the specified expection for target call.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Throws``1(System.Object[])">
            <summary>
            Throws a the specified expection for target call.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.CallOriginal">
            <summary>
            Use it to call the real implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoNothing">
            <summary>
             Specfies call a to step over.
            </summary>
            <remarks>
            For loose mocks by default the behavior is step over.
            </remarks>
            <returns>Refarence to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.MustBeCalled">
            <summary>
            Specifies that the mock call should be invoked to pass <see cref="!:Mock.Assert&lt;T&gt;(T)"/>
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Occurs(System.Int32)">
            <summary>
            Specifies how many times the call should occur.
            </summary>
            <param name="numberOfTimes">Specified number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.OccursAtLeast(System.Int32)">
            <summary>
            Specifies how many times atleast the call should occur.
            </summary>
            <param name="numberOfTimes">Specified number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.OccursAtMost(System.Int32)">
            <summary>
            Specifies how many times maximum the call can occur.
            </summary>
            <param name="numberOfTimes">Specified number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.OccursOnce">
            <summary>
            Specifies that the call must occur once.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.OccursNever">
            <summary>
            Specifies that the call must never occur.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.InSequence">
            <summary>
            Specifies that justmock should invoke different mock instance for each setup.
            </summary>
            <remarks>
            When this modifier is applied
            for similar type call, the flow of setups will be maintained.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.InOrder">
            <summary>
            Specifies a call should occur in a specific order.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.IgnoreInstance">
            <summary>
            Defines that the expectation should occur for all instance.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``1(System.Action{``0})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``2(System.Action{``0,``1})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``3(System.Action{``0,``1,``2})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``4(System.Action{``0,``1,``2,``3})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``5(Telerik.JustMock.Action{``0,``1,``2,``3,``4})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``6(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``7(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``8(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``9(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``10(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``11(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``12(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``13(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``14(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T14">Type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``15(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T14">Type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T15">Type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``16(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T14">Type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T15">Type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T16">Type of the sixteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.ActionExpectation.IgnoreArguments">
            <summary>
            Specifies to ignore any argument for the target call.
            </summary>
            <returns>Func or Action Container</returns>
        </member>
        <member name="T:Telerik.JustMock.Expectations.CollectionExpectation`1">
            <summary>
            Defines expectation for a <see cref="T:System.Linq.IQueryable"/> collection.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CollectionExpectation`1.ReturnsCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a enumerable collecton for the target query.
            </summary>
            <typeparam name="TArg">Argument type</typeparam>
            <typeparam name="TReturn">Return type for the collection</typeparam>
            <param name="funcExpectation">Defines the setup instance under which the collection will be set.</param>
            <param name="collection">Enumerable colleciton</param>
            <returns>Instance of <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/></returns>
        </member>
        <member name="T:Telerik.JustMock.Expectations.EventWaitDuration">
            <summary>
            Defines the wait duration for a specific event.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.EventWaitDuration.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.Expectations.EventWaitDuration"/> class.
            </summary>
            <param name="miliSeconds">Time duration</param>
        </member>
        <member name="P:Telerik.JustMock.Expectations.EventWaitDuration.Miliseconds">
            <summary>
            Number of miliseconds to wait for executing the event.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.FuncExpectation`1">
            <summary>
            Defines the expectation for a sepcific method.
            </summary>
            <summary>
            Implements common expecations.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns(`0)">
            <summary>
            Defines the return value for a sepecific method expecation.
            </summary>
            <param name="value">any object value</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns(System.Func{`0})">
            <summary>
            Specifies the function to evaluate and return.
            </summary>
            <param name="func">Target function to evaluate</param>
            <returns>Refarence to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns(System.Func{`0,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.IgnoreArguments">
            <summary>
            Specifies to ignore any argument for the target call.
            </summary>
            <returns>Func or Action Container</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``1(System.Func{``0,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``2(System.Func{``0,``1,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``3(System.Func{``0,``1,``2,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``4(System.Func{``0,``1,``2,``3,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``5(Telerik.JustMock.Func{``0,``1,``2,``3,``4,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``6(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``7(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``8(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``9(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``10(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``11(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``12(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``13(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``14(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``15(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T15">Type of the fifteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``16(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T15">Type of the fifteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T16">Type of the sixteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="T:Telerik.JustMock.Expectations.NonPublicExpectation">
            <summary>
            Setups non-public expectations.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Arrange(System.Object,System.String,System.Object[])">
            <summary>
            Setups a non-public method for mocking.
            </summary>
            <param name="target">Target instance</param>
            <param name="memberName">Member name</param>
            <param name="args">Method arguments</param>
            <returns>Refernce to setup actions calls</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Arrange``1(System.Object,System.String,System.Object[])">
            <summary>
            Setups a non-public method for mocking.
            </summary>
            <typeparam name="TReturn">Return type</typeparam>
            <param name="target">Target instance.</param>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert(System.Object,System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert``1(System.Object,System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <typeparam name="TReturn">Return type of the method</typeparam>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert(System.Object,System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Arrange``2(System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <typeparam name="T">Type of the target.</typeparam>
            <typeparam name="TReturn">Return type</typeparam>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Arrange``1(System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <typeparam name="T">Type of the target.</typeparam>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Arrange``1(System.Type,System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <typeparam name="TReturn">Return type</typeparam>
            <param name="targetType">Target type</param>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Arrange(System.Type,System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <param name="targetType">Target type</param>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert``1(System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="T">Specify the target type</typeparam>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert``2(System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="T">Specify the target type</typeparam>
            <typeparam name="TReturn">Specify the return type for the method</typeparam>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert``1(System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="T">Specify the target type</typeparam>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert``2(System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="T">Specify the target type</typeparam>
            <typeparam name="TReturn">Specify the return type for the method</typeparam>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert(System.Type,System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="targetType">Type of the target</param>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert``1(System.Type,System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="TReturn">Sepcify the return type method</typeparam>
            <param name="targetType">Type of the target</param>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert(System.Type,System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="targetType">Type of the target</param>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Telerik#JustMock#Expectations#Abstraction#INonPublicExpectation#Assert``1(System.Type,System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="TReturn">Sepcify the return type method</typeparam>
            <param name="targetType">Type of the target</param>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Initialize``1(System.String,System.Object[])">
            <summary>
            Initializes interceptor  for the specified type.
            </summary>
            <remarks>
            The method is useful for setting up non default framework types during class initialization
            as well as pre-intercepting concrete members for future mocking.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Initialize(System.Type,System.String,System.Object[])">
            <summary>
            Initializes interceptor  for the specified type.
            </summary>
            <remarks>
            The method is useful for setting up non default framework types during class initialization
            as well as pre-intercepting concrete members for future mocking.
            </remarks>
        </member>
        <member name="T:Telerik.JustMock.Func`6">
             <summary>
             Encapsulates a method that has 5 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`7">
             <summary>
             Encapsulates a method that has 6 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`8">
             <summary>
             Encapsulates a method that has 7 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`9">
             <summary>
             Encapsulates a method that has 8 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`10">
             <summary>
             Encapsulates a method that has 9 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`11">
             <summary>
             Encapsulates a method that has 10 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`12">
             <summary>
             Encapsulates a method that has 11 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`13">
             <summary>
             Encapsulates a method that has 12 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`14">
             <summary>
             Encapsulates a method that has 13 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`15">
             <summary>
             Encapsulates a method that has 14 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`16">
             <summary>
             Encapsulates a method that has 15 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`17">
             <summary>
             Encapsulates a method that has 16 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Helpers.FluentHelper">
            <summary>
            Contains fluent extensions for setting up or asserting mock expectations.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Arrange``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Setups the target call to act in a specific way.
            </summary>
            <typeparam name="T">Mock type</typeparam>
            <typeparam name="TResult">
            Return type for the target setup.
            </typeparam>
            <param name="obj">
            Target instance.
            </param>
            <param name="expression">Target expression</param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.FuncExpectation`1"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.ArrangeSet``1(``0,System.Action{``0})">
            <summary>
            Setups target property set operation to act in a specific way.  
            <example>
            <code>
            Mock.ArrangeSet(() =&gt;; foo.MyValue = 10).Throws(new InvalidOperationException());
            </code>
            This will throw InvalidOperationException for when foo.MyValue is set with 10.
            </example>
            </summary>
            <typeparam name="T">Mock type</typeparam>
            <param name="obj">Target mock object</param>
            <param name="action">
            Target action
            </param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.ActionExpectation"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Arrange``1(``0,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Setups the target call to act in a specific way.
            </summary>
            <typeparam name="T">
            Return type for the target setup.
            </typeparam>
            <param name="obj">
            Target instance.
            </param>
            <param name="expression">Target expression</param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.ActionExpectation"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Assert``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Asserts the specific call
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Assert``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specific call
            </summary>
            <param name="expression">Target expression</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Assert``1(``0,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Asserts the specific call
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Assert``1(``0,System.Linq.Expressions.Expression{System.Action{``0}},Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specific call
            </summary>
            <param name="obj">Target mock object</param>
            <param name="expression">Target expression</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Raise``1(``0,System.Action{``0},System.EventArgs)">
            <summary>
            Raises the specified mocked event.
            </summary>
            <param name="obj">Target mock object</param>
            <param name="eventExpression">Event expresssion</param>
            <param name="args">Event argument</param>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Raise``1(``0,System.Action{``0},System.Object[])">
            <summary>
            Raises the specified mocked event.
            </summary>
            <param name="obj">Target mock object</param>
            <param name="eventExpression">Event expresssion</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Assert``1(``0)">
            <summary>
            Asserts all expected calls that are marked as must or
            to be occurred a certain number of times.
            </summary>
            <typeparam name="T">Type of the mock</typeparam>
            <param name="target">Target instance</param>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.AssertAll``1(``0)">
            <summary>
            Asserts all expected setups.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Helpers.MultipleReturnValueChainHelper">
            <summary>
            Provides ability to chain Returns method that returns a single value.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Helpers.MultipleReturnValueChainHelper.Returns``1(Telerik.JustMock.Expectations.Abstraction.IAssertable,``0)">
            <summary>
            Defines the return value for a sepecific method expecation.
            </summary>
            <param name="assertable">Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</param>
            <param name="value">any object value</param>
            <returns>Refarence to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IMustBeCalled"/> interface</returns>
        </member>
        <member name="F:Telerik.JustMock.Core.MatcherTree.MatchingOptions.Generalizing">
            <summary>
            Specifies that the provided call pattern is a specific case
            and we're interested in known call patterns who are general cases of the provided one.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.MatcherTree.MatchingOptions.Concretizing">
            <summary>
            Specifies that the provided call pattern is a general case
            and we're interested in known call patterns who are specific cases of the provided one.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.MatcherTree.MatchingOptions.Exact">
            <summary>
            Specifies that we want only exact matches between the provided call pattern
            and known call patterns.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Mock">
            <summary>
            Entry point for setting up and asserting mocks.
            </summary>
            <summary>
            Mock entry point for settting up expection, creating mock objects and verfiying results.
            </summary>
            <summary>
            Mock entry point for settting up expection, creating mock objects and verfiying results.
            </summary>
            <summary>
            Mock entry point for settting up expection, creating mock objects and verfiying results.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.DoNotUseProfiler">
            <summary>
            Tells JustMock not to use profiler features.
            <remarks>When used JustMock will ignore the profiler for current thread or test class scope.</remarks>
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``1">
            <summary>
            Initializes interceptor for the specified type.
            </summary>
            <remarks>
            The method is useful for setting up non default framework types during class initialization
            as well as pre-intercepting concrete members for future mocking.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize(System.Type)">
            <summary>
            Initializes interceptor  for the specified type.
            </summary>
            <remarks>
            The method is useful for setting up non default framework types during class initialization
            as well as pre-intercepting concrete members for future mocking.
            </remarks>
            <param name="targetType">Target type</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``1(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Partial``1">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Partial(System.Type)">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Arrange``2(System.Func{``1})">
            <summary>
            Setups the target call to act in a specific way.
            </summary>
            <typeparam name="T">Target type</typeparam>
            <typeparam name="TResult">
            Return type for the target setup.
            </typeparam>
            <param name="func">
            Expression delegate to the target call
            </param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.FuncExpectation`1"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Arrange``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Setups the target mock call with user expectation.
            </summary>
            <typeparam name="TResult">
            Return type for the target setup.
            </typeparam>
            <param name="expression">
            Provide the target method call
            </param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.FuncExpectation`1"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Arrange``2(``0,System.Func{``0,``1})">
            <summary>
            Setups the target mock call with user expectation.
            </summary>
            <typeparam name="T">Target type</typeparam>
            <typeparam name="TResult">
            Return type for the target setup.
            </typeparam>
            <param name="obj">
            Target instance.
            </param>
            <param name="func">
            Expression delegate to the target call
            </param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.FuncExpectation`1"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Arrange(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Setups the target call to act in a specific way.
            </summary>
            <param name="expression">
            Target expression
            </param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.ActionExpectation"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.ArrangeSet(System.Action)">
            <summary>
            Setups target property set operation to act in a specific way.  
            <example>
            <code>
            Mock.ArrangeSet(() =&gt;; foo.MyValue = 10).Throws(new InvalidOperationException());
            </code>
            This will throw InvalidOperationException for when foo.MyValue is set with 10.
            </example>
            </summary>
            <param name="action">
            Target action
            </param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.ActionExpectation"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Asserts a specific call from expression.
            </summary>
            <param name="expression">Target expression</param>
            <typeparam name="TReturn">Return type for the assert expression</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert``1(System.Linq.Expressions.Expression{System.Func{``0}},Telerik.JustMock.Args)">
            <summary>
            Asserts a specific call from expression.
            </summary>
            <param name="expression">Target expression</param>
            <typeparam name="TReturn">Return type for the assert expression</typeparam>
            <param name="args">Assert argument</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert``1(System.Linq.Expressions.Expression{System.Func{``0}},Telerik.JustMock.Occurs)">
            <summary>
            Asserts a specific call from expression.
            </summary>
            <param name="expression">Target expression</param>
            <param name="occurs">Specifies how many times a call has occurred</param>
            <typeparam name="TReturn">Return type for the target call</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert``2(``0,System.Func{``0,``1})">
            <summary>
            Asserts a specific call from expression.
            </summary>
            <param name="target">Target instance</param>
            <param name="func">Contains the target mock call</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert``2(``0,System.Func{``0,``1},Telerik.JustMock.Occurs)">
            <summary>
            Asserts a specific call from expression.
            </summary>
            <param name="target">Target instance</param>
            <param name="occurs">Specifies how many times a call has occurred</param>
            <param name="func">Contains the target mock call</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Asserts a specific call from expression.
            </summary>
            <param name="expression">Action expression defining the action to verify.</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert(System.Linq.Expressions.Expression{System.Action},Telerik.JustMock.Args)">
            <summary>
            Asserts the specified call from expression.
            </summary>
            <param name="expression">The action to verify.</param>
            <param name="args">Specifies to ignore any arguments during assertion.</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert(System.Linq.Expressions.Expression{System.Action},Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specified call from expression.
            </summary>
            <param name="expression">The action to verify.</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert(System.Linq.Expressions.Expression{System.Action},Telerik.JustMock.Args,Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specified call from expression.
            </summary>
            <param name="expression">The action to verify.</param>
            <param name="args">Specifies to ignore any arguments during assertion.</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.AssertSet(System.Action)">
            <summary>
            Asserts the specific property set operation.
            </summary>
            <param name="action">Action defining the set operation</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.AssertSet(System.Action,Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specific property set operation.
            </summary>
            <param name="action">Action defining the set operation</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.AssertAction(System.Action,Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specific operation.
            </summary>
            <param name="action">Action defining the operation</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert``1(``0)">
            <summary>
            Asserts all expected calls that are marked as must or
            to be occurred a certain number of times.
            </summary>
            <typeparam name="T">Target type</typeparam>
            <param name="mocked">Target instance</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.AssertAll``1(``0)">
            <summary>
            Asserts all expected setups.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Create a mocked instance from specified real constructor.
            </summary>
            <typeparam name="T">Target type for the mocked instance</typeparam>
            <param name="expression">Target expression for specifying the new type.</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(System.Linq.Expressions.Expression{System.Func{``0}},Telerik.JustMock.Behavior)">
            <summary>
            Creates a mocked instance from specified real constructor.
            </summary>
            <typeparam name="T">Target type for the mocked instance</typeparam>
            <param name="expression">Target expression for specifying the new type.</param>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.Loose"/></param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(System.Action{Telerik.JustMock.Abstraction.IFluentConfig{``0}})">
            <summary>
            Creates a mocked instance from settings specified in the lambda.
            </summary>
            <typeparam name="T">Type of the mock</typeparam>
            <param name="settings">Specifies mock settings</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(Telerik.JustMock.Behavior,System.Object[])">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <typeparam name="T">Type of the mock</typeparam>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.Loose"/></param>
            <param name="args">Constructor arguments</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <typeparam name="T">Type of the mock</typeparam>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create(System.Type,System.Object[])">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <param name="target">Target to mock</param>
            <param name="args">Constructor arguments</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.SetupStatic``1">
            <summary>
            Setups the target for mocking all static calls.
            </summary>
            <remarks>
            Considers all public members of the class. To mock private member,
            please use Mock.NonPublic 
            </remarks>
            <typeparam name="T">Target type</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.SetupStatic``1(Telerik.JustMock.Behavior)">
            <summary>
            Setups the target for mocking all static calls.
            </summary>
            <remarks>
            Considers all public members of the class. To mock private member,
            please use the private interface Mock.NonPublic
            </remarks>
            <param name="behavior">
            Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.Loose"/>
            </param>
            <typeparam name="T">
            Target type
            </typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.SetupStatic(System.Type,Telerik.JustMock.StaticConstructor)">
            <summary>
            Setups the target for mocking all static calls.
            </summary>
            <param name="staticType">Static type</param>
            <param name="staticConstructor">Defines the behavior of the static constructor</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.SetupStatic(System.Type)">
            <summary>
            Setups the target for mocking all static calls.
            </summary>
            <param name="staticType">Static type</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.SetupStatic(System.Type,Telerik.JustMock.Behavior)">
            <summary>
            Setups the target for mocking all static calls.
            </summary>
            <param name="targetType">Target type</param>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.Loose"/></param>
        </member>
        <member name="M:Telerik.JustMock.Mock.SetupStatic(System.Type,Telerik.JustMock.Behavior,Telerik.JustMock.StaticConstructor)">
            <summary>
            Setups the target for mocking all static calls.
            </summary>
            <param name="targetType">Target type</param>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.Loose"/></param>
            <param name="staticConstructor">Defines the behavior of the static constructor</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create(System.String)">
            <summary>
            Creates a mocked instance from a internal class.
            </summary>
            <param name="fullName">Fully qualified name of the target type.</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create(System.String,Telerik.JustMock.Behavior)">
            <summary>
            Creates a mocked instance from an internal class.
            </summary>
            <param name="fullName">Fully qualified name of the target type.</param>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.Loose"/></param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create(System.String,System.Action{Telerik.JustMock.Abstraction.IFluentConfig})">
            <summary>
            Creates a mocked instance from an internal class.
            </summary>
            <param name="fullName">Fully qualified name of the target type.</param>
            <param name="settings">Settings for the mock</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(Telerik.JustMock.Constructor)">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <param name="constructor">
            Specifies whether to call the base constructor
            </param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(Telerik.JustMock.Constructor,Telerik.JustMock.Behavior)">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <param name="constructor">
            Specifies whether to call the base constructor
            </param>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.Loose"/></param>
            <returns>Mock instance</returns>
            <typeparam name="T">Target type</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create(System.Type,Telerik.JustMock.Constructor,Telerik.JustMock.Behavior)">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <param name="targetType">Target to mock</param>
            <param name="constructor">
            Specifies whether to call the base constructor
            </param>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.Loose"/></param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create(System.Type,System.Action{Telerik.JustMock.Abstraction.IFluentConfig})">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <param name="target">Target type to mock</param>
            <param name="settings">Mock settings</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create(System.Type,Telerik.JustMock.Behavior,System.Object[])">
            <summary>
            Creates a mock instance from a given type.
            </summary>
            <param name="target">Mocking type</param>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.Loose"/></param>
            <param name="args">Constructor arguments</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(System.Object[])">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <typeparam name="T">Mocked object type.</typeparam>
            <param name="args">Constructor arguments</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.CreateLike``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a mock by parsing the given functional specification.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="functionalSpecification">The functional specification to apply to the mock object.</param>
            <returns>A mock with the given functional specification.</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.ArrangeLike``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Arranges the return values of properties and methods according to the given functional specification.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mock">The mock on which to make the arrangements.</param>
            <param name="functionalSpecification">The functional specification to apply to this mock.</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Raise(System.Action,System.EventArgs)">
            <summary>
            Raises the specified mocked event.
            </summary>
            <param name="eventExpression">Event expression</param>
            <param name="args">Event argument</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Raise(System.Action,System.Object[])">
            <summary>
            Raises the specified mocked event.
            </summary>
            <param name="eventExpression">Event expression</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Reset">
            <summary>
            Removes all existing arrangements within the current mocking context (e.g. current test method).
            Arrangements made in parent mocking contexts (e.g. in fixture setup method) are preserved.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``2(System.Linq.Expressions.Expression{System.Action{``0,``1}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``5(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``6(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``6(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``7(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``7(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``8(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``8(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``9(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``9(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``2(System.Linq.Expressions.Expression{System.Action{``0,``1}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``6(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``5(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``7(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``6(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``8(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``7(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``9(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``8(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``10(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``9(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="P:Telerik.JustMock.Mock.IsProfilerEnabled">
            <summary>
            Gets a value indicating whether the JustMock profiler is enabled.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.JustMock.Mock.NonPublic">
            <summary>
            Returns interface defining non-public expectations.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.MockInitializer">
            <summary>
            Mock interceptor initializer.
            </summary>
            <summary>
            Class definining members for partially setting up mock on a call.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Initializes the mock interceptor.
            </summary>
            <param name="expression">Target expression containing the member to initialize.</param>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``2(System.Linq.Expressions.Expression{System.Action{``0,``1}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``6(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``5(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``7(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``6(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``8(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``7(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``9(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``8(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.MockInitializer`1">
            <summary>
            Class definining members for partially setting up mock on a call.
            </summary>
            <summary>
            Class definining members for partially setting up mock on a call.
            </summary>
            <typeparam name="T">Target</typeparam>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``1(System.Linq.Expressions.Expression{System.Action{`0,``0}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``3(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``2(System.Linq.Expressions.Expression{System.Action{`0,``0,``1}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``4(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``3(System.Linq.Expressions.Expression{System.Action{`0,``0,``1,``2}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``5(System.Linq.Expressions.Expression{Telerik.JustMock.Func{`0,``0,``1,``2,``3,``4}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``4(System.Linq.Expressions.Expression{Telerik.JustMock.Action{`0,``0,``1,``2,``3}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``6(System.Linq.Expressions.Expression{Telerik.JustMock.Func{`0,``0,``1,``2,``3,``4,``5}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``5(System.Linq.Expressions.Expression{Telerik.JustMock.Action{`0,``0,``1,``2,``3,``4}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``7(System.Linq.Expressions.Expression{Telerik.JustMock.Func{`0,``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``6(System.Linq.Expressions.Expression{Telerik.JustMock.Action{`0,``0,``1,``2,``3,``4,``5}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``8(System.Linq.Expressions.Expression{Telerik.JustMock.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``7(System.Linq.Expressions.Expression{Telerik.JustMock.Action{`0,``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``9(System.Linq.Expressions.Expression{Telerik.JustMock.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``8(System.Linq.Expressions.Expression{Telerik.JustMock.Action{`0,``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MsCorlibInitializer.In``1">
            <summary>
            Initializes all method for the target mscorlib member.
            </summary>
            <typeparam name="T">Container type</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Occurs">
            <summary>
            Defines filters for calls , used in conjunction with assert.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Occurs.Never">
            <summary>
            Specifies that the expected call must never occur
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Occurs.Once">
            <summary>
            Specifies that the expected call should occur once.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Occurs.AtLeast(System.Int32)">
            <summary>
            Specifies that the expected call should occur at least <paramref name="numberOfTimes"/>  times.
            </summary>
            <param name="numberOfTimes">Specific number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Occurs.AtLeastOnce">
            <summary>
            Specifies that the expected call should occur at least once.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Occurs.AtMost(System.Int32)">
            <summary>
            Specifies that the expected call should occur at most <paramref name="numberOfTimes"/>  times.
            </summary>
            <param name="numberOfTimes">Specific number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Occurs.Exactly(System.Int32)">
            <summary>
            Specifies that the expected call should occur exactly <paramref name="numberOfTimes"/>  times.
            </summary>
            <param name="numberOfTimes">Specific number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Occurs.NotAvailable">
            <summary>
            Specifies that occurrence is not available.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.RangeKind">
            <summary>
             Defines the kind of range value to consider.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.RangeKind.Exclusive">
            <summary>
            Does not consider first and last value.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.RangeKind.Inclusive">
            <summary>
            Considers the First and last value.
            </summary>  
        </member>
        <member name="T:Telerik.JustMock.StaticConstructor">
            <summary>
            Defines behavior of the static constructor.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.StaticConstructor.NonMocked">
            <summary>
            Defines that the static constructor is not mocked.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.StaticConstructor.Mocked">
            <summary>
            Defines that is static constructor is mocked.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Wait">
            <summary>
            Specifies the duration to wait before executing an event.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Wait.For(System.Int32)">
            <summary>
            Specifies the number of seconds to wait for executing an event.
            </summary>
            <param name="seconds">Seconds to wait</param>
        </member>
        <member name="M:Telerik.JustMock.Wait.For(System.TimeSpan)">
            <summary>
            Specifies the number of seconds to wait for executing an event.
            </summary>
            <param name="duration">Time duration to wait</param>
        </member>
    </members>
</doc>
