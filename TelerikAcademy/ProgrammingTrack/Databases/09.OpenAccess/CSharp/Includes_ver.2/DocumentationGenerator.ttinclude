<#+ 
public class DocumentationGenerator : Telerik.OpenAccess.CodeGeneration.TelerikTextTransformationBase
{
	public DocumentationGenerator(TextTransformation rootGenerator)
		:base(rootGenerator)
    {
	}

	/// <summary>
	/// Generates a summary.
	/// </summary>
	/// <param name="summary">The content of the summary.</param>
	public void GenerateSummary(string summary)
	{
		if(string.IsNullOrEmpty(summary) == false)
		{
#>
///<summary>
/// <#= summary #>
///</summary>
<#+
		}
	}

	public void GenerateFileBlockHeader()
	{
#>
#pragma warning disable 1591
<#+
	}

	public void GenerateAutoGeneratedMessage(string generatedBy)
	{
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the <#= generatedBy #> code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#+
	}

	public void GenerateFileBlockFooter()
	{
#>
#pragma warning restore 1591
<#+
	}

	/// <summary>
	/// Generates a single-line comment.
	/// </summary>
	/// <param name="comment">The content of the comment.</param>
	public void GenerateComments(params string[] rows)
	{
		if (rows.Length > 0)
		{
            foreach (var row in rows)
            {
#>
// <#= row #>
<#+
            }
		}
	}

	/// <summary>
	/// Generates single-line comments.
	/// </summary>
	/// <param name="comments">The content of the comments.</param>
	public void GenerateComments(IEnumerable<Telerik.OpenAccess.CodeGeneration.CodeComment> comments)
	{
        this.GenerateComments(comments.Select(c => c.Text).ToArray());
	}
}
#>