<#+
public class ClassGenerator : Telerik.OpenAccess.CodeGeneration.TelerikTextTransformationBase
{
	protected AttributesGenerator attributesGenerator;
	protected DocumentationGenerator documentationGenerator;
	protected PropertiesGenerator propertiesGenerator;
	protected bool isAttributesMapping;
	
	public ClassGenerator(TextTransformation rootGenerator, AttributesGenerator attributesGenerator, 
		DocumentationGenerator documentationGenerator, PropertiesGenerator propertiesGenerator, Telerik.OpenAccess.Metadata.MappingDefinitionType mappingType)
		:base(rootGenerator)
    {
		this.attributesGenerator = attributesGenerator;
		this.documentationGenerator = documentationGenerator;
		this.propertiesGenerator = propertiesGenerator;
		this.isAttributesMapping = mappingType == Telerik.OpenAccess.Metadata.MappingDefinitionType.Attributes;
	}

	/// <summary>
	/// Generates a class.
	/// </summary>
	/// <param name="@class">The class model.</param>
	public void GenerateClass(Telerik.OpenAccess.CodeGeneration.CodeClass @class)
	{
		this.documentationGenerator.GenerateComments(@class.Comments);	
		this.documentationGenerator.GenerateSummary(@class.Summary);
		this.attributesGenerator.GenerateAttributes(@class.Attributes);
		this.GenerateClassSignature(@class);
#>
{
<#+ 
		this.PushIndent("\t");
		this.propertiesGenerator.GenerateProperties(@class);
        if (@class.ImplementIDataErrorInfo)
        {
			if(@class.BaseClass == null)
            {
				this.GenerateIDataErrorInfoMembers();
            }
			else
            {
				this.GenerateIDataErrorInfoInDerivedClass();
			}
        }

        if (@class.ImplementINotifyPropertyChanging && @class.BaseClass == null)
        {
			this.GenerateINotifyPropertyChangingMembers();
        }

        if (@class.ImplementINotifyPropertyChanged && @class.BaseClass == null)
        {
			this.GenerateINotifyPropertyChangedMembers();
        }

		this.PopIndent();
#>
}
<#+ 
	}

	protected void GenerateClassSignature(Telerik.OpenAccess.CodeGeneration.CodeClass codeClass)
	{
		LinkedList<string> implements = new LinkedList<string>(codeClass.Implements.Select(i => i.Name));
		if (codeClass.BaseClass != null)
		{
			implements.AddFirst(codeClass.BaseClass.Name);
		}
		var interfaceString = string.Join(", ", implements);

		if (string.IsNullOrWhiteSpace(interfaceString) == false)
		{
			 interfaceString = " : " + interfaceString;
		}
#>
<#= codeClass.TypeAccessModifier.ToCode() #><#= codeClass.TypeInheritanceModifier.ToCode() #> partial class <#= codeClass.Name #><#= interfaceString #>
<#+
	}

	protected void GenerateIDataErrorInfoMembers()
    {
#>
#region IDataErrorInfo members

<#+
		if(this.isAttributesMapping)
        {
			this.attributesGenerator.GenerateTransientAttribute();
		}
#>
private string error = string.Empty;
<#+
		if(this.isAttributesMapping)
        {
			this.attributesGenerator.GenerateTransientAttribute();
		}
#>
public string Error
{
	get
	{
		return this.error;
	}
}

<#+
		if(this.isAttributesMapping)
        {
			this.attributesGenerator.GenerateTransientAttribute();
		}
#>
public string this[string propertyName]
{
	get
	{
		this.ValidatePropertyInternal(propertyName, ref this.error);

		return this.error;
	}
}

protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
{
    this.ValidateProperty(propertyName, ref error);
}

// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
partial void ValidateProperty(string propertyName, ref string error);

#endregion

<#+
    }

	protected void GenerateIDataErrorInfoInDerivedClass()
    {
#>
#region IDataErrorInfo members

protected override void ValidatePropertyInternal(string propertyName, ref string error)
{
    this.ValidateProperty(propertyName, ref error);
}

// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
partial void ValidateProperty(string propertyName, ref string error);

#endregion

<#+
    }

	protected void GenerateINotifyPropertyChangingMembers()
	{
#>
#region INotifyPropertyChanging members

public event PropertyChangingEventHandler PropertyChanging;

protected virtual void OnPropertyChanging(string propertyName)
{
	if(this.PropertyChanging != null)
	{
		this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
	}
}

#endregion

<#+
    }

	protected void GenerateINotifyPropertyChangedMembers()
    {
#>
#region INotifyPropertyChanged members

public event PropertyChangedEventHandler PropertyChanged;

protected virtual void OnPropertyChanged(string propertyName)
{
	if(this.PropertyChanged != null)
	{
		this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
	}
}

#endregion

<#+
	}
}
#>